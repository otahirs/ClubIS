<MudExpansionPanel>
    <TitleContent>
        @if (Event.EventState != EventState.Canceled)
        {
            <MudText Typo="Typo.h3">@Event.Name</MudText>
        }
        else
        {
            <MudText Typo="Typo.h3" Color="Color.Error">
                @Event.Name - Calceled
            </MudText>
        }
    </TitleContent>
    <ChildContent>
        <MudText><b>Place:</b> @Event.Place</MudText>
        <MudText><b>Organizer:</b> @Event.Organizer</MudText>
        <MudText><b>Leader:</b> @Event.Leader</MudText>
        <MudText><b>Start date:</b> @Event.StartDate.ToString("dd.MM.yyyy")</MudText>
        <MudText><b>End date:</b> @Event.EndDate.ToString("dd.MM.yyyy")</MudText>
        <MudText><b>Event type:</b> @Event.EventType</MudText>
        <MudText><b>Link:</b> <MudLink Href="@GetLink()">@Event.Link</MudLink></MudText>
        <MudText><b>Deadlines:</b> @GetDeadlines()</MudText>
        <MudText><b>Class options:</b> @GetClassOptions()</MudText>
        <MudText><b>Event state:</b> @Event.EventState</MudText>
        <MudText><b>Event properties:</b> @Event.EventProperties</MudText>
        <MudText><b>Event stages:</b> @GetStages()</MudText>
        <MudText><b>Note:</b> @Event.Note</MudText>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter]
    public EventDTO Event { get; set; }

    private string GetLink()
    {
        return "https://" + Event.Link;
    }

    private string GetDeadlines()
    {
        return (Event.Deadlines.Count != 0) ? Event.Deadlines.Select(d => d.Deadline.ToString("dd.MM.yyyy")).Aggregate((a, b) => a + ", " + b) : "";
    }

    private string GetClassOptions()
    {
        return Event.ClassOptions.Select(a => a.Name).Aggregate((a, b) => a + ", " + b);
    }

    private string GetStages()
    {
        return (Event.EventStages.Count != 0) ? Event.EventStages.Select(s => s.Name).Aggregate((a, b) => a + ", " + b) : "";
    }
} 