@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IdentityAuthenticationStateProvider AuthStateProvider

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudList Clickable="true" Class="xs-12">
        <MudListItem Icon="@Icons.Material.Filled.Login" Text="Change login">
            <NestedList>
                @if (_changeLogin == null)
                {
                    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
                }
                else
                {
                    <EditForm Model="@_changeLogin" OnValidSubmit="OnValidLoginSubmit">
                        <DataAnnotationsValidator/>
                        <MudCard Elevation="0">
                            <MudCardContent>
                                <MudTextField Label="Login" @bind-Value="_changeLogin.NewUserName" For="@(() => _changeLogin.NewUserName)" Variant="Variant.Outlined"/>
                                <MudTextField InputType="InputType.Password" Label="Your password" @bind-Value="_changeLogin.ApprovalPassword" For="@(() => _changeLogin.ApprovalPassword)" Variant="Variant.Outlined"/>
                                @if (_errorMesageLoginChange != null)
                                {
                                    <MudAlert Severity="Severity.Error">@_errorMesageLoginChange</MudAlert>
                                }
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-2">Save</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </EditForm>
                }
            </NestedList>
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.Lock" Text="Change password">
            <NestedList>
                @if (_changePassword == null)
                {
                    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
                }
                else
                {
                    <EditForm Model="@_changePassword" OnValidSubmit="OnValidPasswordSubmit">
                        <DataAnnotationsValidator/>
                        <MudCard Elevation="0">
                            <MudCardContent>
                                <MudTextField InputType="InputType.Password" Label="Old password" @bind-Value="_changePassword.OldPassword" For="@(() => _changePassword.OldPassword)" Variant="Variant.Outlined"/>
                                <MudTextField InputType="InputType.Password" Label="New password" @bind-Value="_changePassword.NewPassword" For="@(() => _changePassword.NewPassword)" Variant="Variant.Outlined"/>
                                <MudTextField InputType="InputType.Password" Label="New password again" @bind-Value="_newPasswordAgain" For="@(() => _newPasswordAgain)" Variant="Variant.Outlined"/>
                                @if (_errorMesagePasswordChange != null)
                                {
                                    <MudAlert Severity="Severity.Error">@_errorMesagePasswordChange</MudAlert>
                                }
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-2">Save</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </EditForm>
                }
            </NestedList>
        </MudListItem>
    </MudList>
</MudContainer>

@code {

    [Parameter]
    public int EditedUserId { get; set; }

    private ChangeLoginDTO _changeLogin;
    private ChangePasswordDTO _changePassword;

    private string _newPasswordAgain;

    private string _errorMesageLoginChange;
    private string _errorMesagePasswordChange;

    protected override async Task OnInitializedAsync()
    {
        var currentUserName = await AuthStateProvider.GetUserNameById(EditedUserId);
        _changeLogin = new ChangeLoginDTO {EditedUserId = EditedUserId, NewUserName = currentUserName};
        _changePassword = new ChangePasswordDTO {EditedUserId = EditedUserId};
    }


    private async Task OnValidLoginSubmit(EditContext context)
    {
        _errorMesageLoginChange = null;
        try
        {
            await AuthStateProvider.ChangeLogin(_changeLogin);
        }
        catch (Exception e)
        {
            _errorMesageLoginChange = e.Message;
        }
    }

    private async Task OnValidPasswordSubmit(EditContext context)
    {
        _errorMesagePasswordChange = null;
        if (_changePassword.NewPassword != _newPasswordAgain)
        {
            _errorMesagePasswordChange = "Passwords do not match.";
            return;
        }
        try
        {
            await AuthStateProvider.ChangePassword(_changePassword);
        }
        catch (Exception e)
        {
            _errorMesagePasswordChange = e.Message;
        }
    }

}