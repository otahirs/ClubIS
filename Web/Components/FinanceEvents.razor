@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Events == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudPaper Class="d-flex justify-space-between" Elevation="0">
        <MudTextField Class="ma-4" @bind-Value="_searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        <MudSelect @bind-Value="_searchType" Label="Filter EventType" Class=" ma-4">
            @foreach (var type in _types)
            {
                <MudSelectItem Value="@type"/>
            }
        </MudSelect>
    </MudPaper>
    <MudTable Items="@Events" T="EventListWithTotalCostsDTO" Dense="true" Hover="true" Filter="new Func<EventListWithTotalCostsDTO, bool>(FilterFunc)" OnRowClick="Navigate">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Place</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Deadlines</MudTh>
            <MudTh>Cost</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@GetDate(context.Event.StartDate, context.Event.EndDate)</MudTd>
            <MudTd DataLabel="Name">@context.Event.Name</MudTd>
            <MudTd DataLabel="Place">@context.Event.Place</MudTd>
            <MudTd DataLabel="Type">@context.Event.EventType</MudTd>
            <MudTd DataLabel="Deadlines">@GetDeadlines(context.Event.Deadlines)</MudTd>
            <MudTd DataLabel="Cost">@context.TotalCosts</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    public List<EventListWithTotalCostsDTO> Events;

    private List<string> _types = Enum.GetNames(typeof(EventType)).Prepend("All").ToList();
    private string _searchType = "All";
    string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        Events = await Http.GetFromJsonAsync<List<EventListWithTotalCostsDTO>>("Events/costs");
    }

    bool FilterFunc(EventListWithTotalCostsDTO e)
    {
        if (_searchString == null)
            _searchString = "";
        var eventData = $"{GetDate(e.Event.StartDate, e.Event.EndDate)} {e.Event.Name} {e.Event.Place} {e.Event.EventType} {GetDeadlines(e.Event.Deadlines)}";
        var eventType = e.Event.EventType.ToString();

        return (_searchType == "All" || eventType.Contains(_searchType)) && eventData.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase);
    }

    private void Navigate(TableRowClickEventArgs<EventListWithTotalCostsDTO> obj)
    {
        NavigationManager.NavigateTo($"admin/finance/event/{obj.Item.Event.Id}");
    }

    private static string GetDate(DateTime start, DateTime end)
    {
        return start.Equals(end) ? end.ToString("dd.MM.yyyy") : start.ToString("dd.") + '-' + end.ToString("dd.MM.yyyy");
    }

    private static string GetDeadlines(ICollection<EventDeadline> deadlines)
    {
        return deadlines.Count != 0 ? deadlines.Select(d => d.Deadline.ToString("dd.MM.yyyy")).Aggregate((a, b) => a + ", " + b) : "";
    }

}