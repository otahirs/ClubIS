@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (_memberFees == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudTable Items="@_memberFees" T="MemberFeeDTO" Hover="true" Dense="true" Class="mb-16" OnRowClick="e => _feeEdit = e.Item">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Amount</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Amount">@context.Amount</MudTd>
        </RowTemplate>
    </MudTable>

    @if (_feeEdit != null)
    {
        <EditForm Model="@_feeEdit" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudTextField Label="Name" @bind-Value="_feeEdit.Name" For="@(() => _feeEdit.Name)" Variant="Variant.Outlined"/>
                    <MudTextField Label="Description" @bind-Value="_feeEdit.Description" For="@(() => _feeEdit.Description)" Variant="Variant.Outlined"/>
                    <MudTextField Label="Amount" @bind-Value="_feeEdit.Amount" For="@(() => _feeEdit.Amount)" Variant="Variant.Outlined"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Filled.Close" OnClick="() => _feeEdit = null" Class="ml-3">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    @if (_feeEdit.Id != 0)
                    {
                        <MudTooltip Text="TODO">
                            <MudButton Disabled="true" ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary" OnClick="Remove" Class="mx-2">Remove</MudButton>
                        </MudTooltip>
                    }
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
    else
    {
        <MudTooltip Text="TODO">
            <MudButton Class="my-2" ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Disabled="true">New</MudButton>
        </MudTooltip>
    }
}

@code {
    private List<MemberFeeDTO> _memberFees;
    private MemberFeeDTO _feeEdit;

    protected override async Task OnInitializedAsync()
    {
        _memberFees = await Http.GetFromJsonAsync<List<MemberFeeDTO>>("Payments/member-fee-types");
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (_feeEdit == null)
        {
            await Http.PostAsJsonAsync("Payments/member-fee-types", _feeEdit);
        }
        else
        {
            await Http.PutAsJsonAsync("Payments/member-fee-types", _feeEdit);
        }
    }

    private async Task Remove()
    {
        await Http.DeleteAsync($"Payments/member-fee-types/{_feeEdit.Id}");
        _memberFees.RemoveAll(f => f.Id == _feeEdit.Id);
        _feeEdit = null;
    }

}