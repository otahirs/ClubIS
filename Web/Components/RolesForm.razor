@inject IdentityAuthenticationStateProvider AuthStateProvider

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    @if (_roles == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <MudCard Elevation="0">
            <MudCardContent>
                @foreach (var key in _rolesAndPermissions.Keys)
                {
                    <MudGrid>
                        <MudItem xs="8">
                            <b>@key</b>
                        </MudItem>
                        <MudItem xs="4">
                            <MudCheckBox @bind-Checked="@_rolesAndPermissions[key]"></MudCheckBox>
                        </MudItem>
                    </MudGrid>
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges" Class="ml-3">Save</MudButton>
            </MudCardActions>
        </MudCard>
    }
</MudContainer>

@code {

    [Parameter]
    public int UserId { get; set; }

    private Dictionary<string, bool> _rolesAndPermissions = new();
    private UserRolesDTO _roles = new();

    protected override async Task OnInitializedAsync()
    {
        _roles = await AuthStateProvider.GetUserRolesById(UserId);
        foreach (var r in Role.GetAll())
        {
            _rolesAndPermissions.Add(r, _roles.Roles.Contains(r));
        }
    }

    private async Task SaveChanges()
    {
        foreach (var (role, hasPermission) in _rolesAndPermissions)
        {
            if (hasPermission)
            {
                if (!_roles.Roles.Contains(role))
                {
                    _roles.Roles.Add(role);
                }
            }
            else
            {
                if (_roles.Roles.Contains(role))
                {
                    _roles.Roles.Remove(role);
                }
            }
        }
        await AuthStateProvider.ChangeUserRoles(_roles);
    }

}