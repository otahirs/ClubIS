@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    @if (User == null || _memberFeeTypes == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <EditForm Model="@User" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudSelect T="MemberFeeDTO" Label="Selected member fee" Variant="Variant.Outlined" ToStringFunc="m => m.Name" @bind-Value="User.MemberFee">
                        @foreach (var memberFeeType in _memberFeeTypes)
                        {
                            <MudSelectItem T="MemberFeeDTO" Value="memberFeeType"/>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-2">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</MudContainer>

@code {

    [Parameter]
    public UserDTO User { get; set; }

    private List<MemberFeeDTO> _memberFeeTypes;

    protected override async Task OnInitializedAsync()
    {
        _memberFeeTypes = await Http.GetFromJsonAsync<List<MemberFeeDTO>>("Payments/member-fee-types");
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await Http.PutAsJsonAsync("Users", User);
    }

}