@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3">Si Cards</MudText>
    @if (User == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <EditForm Model="@User" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard Elevation="0">
                <MudCardContent>
                    @foreach (var siCard in User.SiCards)
                    {
                        <MudGrid>
                            <MudItem xs="4">
                                <MudTextField @bind-Value="siCard.Number" For="@(() => siCard.Number)" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary" OnClick="e => DeleteSICard(siCard)" Class="mt-4">Delete</MudButton>
                            </MudItem>
                            <MudItem xs="4">
                                @if (siCard.IsDefault)
                                {
                                    <MudChip Class="mt-4">Default</MudChip>
                                }
                                else
                                {
                                    <MudButton Class="mt-4" ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Filled.Cached" Variant="Variant.Filled" Color="Color.Secondary" OnClick="e => SetSICardAsDefault(siCard)">Set as default</MudButton>
                                }
                            </MudItem>
                        </MudGrid>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Material.Filled.Close" OnClick="RedoChanges" Class="ml-3">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="ShowNewSICardLine" Class="ml-3">SI Card</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-3">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</MudContainer>

@code {
    [Parameter]
    public UserDTO User { get; set; }
    [Parameter]
    public bool IsAdmin { get; set; }


    private void DeleteSICard(SiCardDTO siCard)
    {
        bool setNewDefaultCard = siCard.IsDefault && User.SiCards.Count > 1;
        User.SiCards.Remove(siCard);
        if (setNewDefaultCard)
        {
            User.SiCards.First().IsDefault = true;
        }
    }

    private void SetSICardAsDefault(SiCardDTO siCard)
    {
        User.SiCards.FirstOrDefault(s => s.IsDefault).IsDefault = false;
        siCard.IsDefault = true;
    }

    private void ShowNewSICardLine()
    {
        SiCardDTO siCardDTO = new SiCardDTO();
        if (User.SiCards.Count == 0)
        {
            siCardDTO.IsDefault = true;
        }
        User.SiCards.Add(siCardDTO);
    }

    private async Task RedoChanges()
    {
        User = await Http.GetFromJsonAsync<UserDTO>($"Users/{User.Id}");
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (IsAdmin)
        {
            await Http.PutAsJsonAsync<UserDTO>("Users", User);
        }
        else
        {
            MemberUserEditDTO sendData = new MemberUserEditDTO()
            {
                Id = User.Id,
                SiCards = User.SiCards
            };
            await Http.PutAsJsonAsync<MemberUserEditDTO>("Users/member-edit", sendData);
        }
    }
}
