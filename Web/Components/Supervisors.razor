@inject HttpClient Http
@inject Searching Searching

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    @if (_userSupervisions == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <MudCard Elevation="0">
            <MudText Typo="Typo.h4">Entries</MudText>
            <MudCardContent>
                <MudGrid>
                    @RenderSepervisionTable(_userSupervisions.EntriesSupervisors, true, _entriesSupervisingForm)
                    @RenderSepervisionTable(_userSupervisions.EntriesSupervisedUsers, false, _entriesSupervisedUsersForm)
                </MudGrid>
            </MudCardContent>
        </MudCard>

        <MudCard Elevation="0">
            <MudText Typo="Typo.h4" Class="mt-8">Finance</MudText>
            <MudCardContent>
                <MudGrid>
                    @RenderSepervisionTable(_userSupervisions.FinanceSupervisors, true, _financeSupervisingForm)
                    @RenderSepervisionTable(_userSupervisions.FinanceSupervisedUsers, false, _financeSupervisedUsersForm)
                </MudGrid>
            </MudCardContent>
        </MudCard>

        @if (IsAdmin)
        {
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" OnClick="SaveChanges">Save all</MudButton>
        }
    }
</MudContainer>

@code {

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public bool IsAdmin { get; set; }

    private UserSupervisionsDTO _userSupervisions;
    private UserListDTO[] _allUsers;

    private Form _entriesSupervisingForm = new();
    private Form _entriesSupervisedUsersForm = new();
    private Form _financeSupervisingForm = new();
    private Form _financeSupervisedUsersForm = new();

    protected override async Task OnInitializedAsync()
    {
        _userSupervisions = await Http.GetFromJsonAsync<UserSupervisionsDTO>($"Users/supervision/{UserId}");
        _allUsers = await Http.GetFromJsonAsync<UserListDTO[]>("Users");
    }

    private RenderFragment RenderSepervisionTable(List<UserListDTO> supervisionCollection, bool isSupervisor, Form form)
    {
        return @<MudItem sm="6">
                    <MudSimpleTable Elevation="0">
                        <thead>
                        <MudText Typo="Typo.h6">@(isSupervisor ? "Supervised by" : "Users under supervision")</MudText>
                        </thead>
                        <tbody>
                        @foreach (var item in supervisionCollection)
                        {
                            <tr>
                                <td><MudText>@item.Surname @item.Firstname</MudText></td>
                                @if (IsAdmin)
                                {
                                    <td>
                                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" OnClick="e => DeleteSupervision(item, supervisionCollection)"><MudIcon Icon="@Icons.Material.Filled.Delete"/></MudButton>
                                    </td>
                                }
                            </tr>
                        }
                        </tbody>
                   </MudSimpleTable>
                   @if (IsAdmin)
                   {
                       @form.RenderedForm
                       @if (form.RenderedForm == null && !DisableSupervisionAddition(form, supervisionCollection))
                       {
                           <MudButton Class="my-2" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="e => AddSupervisionForm(form, supervisionCollection)"><MudIcon Icon="@Icons.Material.Filled.Add"/></MudButton>
                       }
                   }
               </MudItem>;
    }

    private string RenderUserName(UserListDTO user)
    {
        return user.Surname + " " + user.Firstname;
    }

    private void DeleteSupervision(UserListDTO user, List<UserListDTO> collection)
    {
        collection.Remove(user);
    }

    private void AddSupervisionForm(Form form, List<UserListDTO> supervisionCollection)
    {
        form.RenderedForm = 
            @<MudGrid>
                <MudItem xs="7">
                    <MudAutocomplete T="int?" @bind-Value="form.BindedUserId" SearchFunc="str => Search(GetAvailableUsers(supervisionCollection), str)" ToStringFunc="id => RenderUserName(_allUsers.First(u => id == u.Id))" For="() => form.BindedUserId" Variant="Variant.Outlined" ResetValueOnEmptyText="true"/>
                </MudItem>
                <MudItem xs="5" Class="mt-4">
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="e => AddSupervision(form, supervisionCollection)">Add</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Material.Filled.Close" OnClick="e => CancelForm(form)">Cancel</MudButton>
                </MudItem>
            </MudGrid>;
    }

    private List<UserListDTO> GetAvailableUsers(List<UserListDTO> supervisionCollection)
    {
        return _allUsers.Where(u => u.Id != UserId && supervisionCollection.All(s => s.Id != u.Id)).ToList();
    }

    private bool DisableSupervisionAddition(Form form, List<UserListDTO> supervisionCollection)
    {
        return form.RenderedForm != null || GetAvailableUsers(supervisionCollection).Count == 0;
    }

    private void CancelForm(Form form)
    {
        form.RenderedForm = null;
    }

    private async Task AddSupervision(Form form, List<UserListDTO> supervisionCollection)
    {
        CancelForm(form);
        try
        {
            var user = await Http.GetFromJsonAsync<UserListDTO>($"Users/{form.BindedUserId}");
            supervisionCollection.Add(user);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task<IEnumerable<int?>> Search(List<UserListDTO> users, string searchValue)
    {
        return Searching.SearchItems(users, searchValue).Cast<int?>().ToList();
    }

    private class Form
    {
        public RenderFragment RenderedForm { get; set; }
        public int? BindedUserId { get; set; }
    }

    private async Task SaveChanges()
    {
        await Http.PutAsJsonAsync("Users/supervision", _userSupervisions);
    }

}