@inject HttpClient Http

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3">Login</MudText>
    <MudList Clickable="true" Class="xs-12">
        <MudListItem Icon="@Icons.Material.StickyNote2" Text="Entries supervision">
            <NestedList>
                @if (UserSupervisions == null)
                {<MudProgressCircular Color="Color.Default" Indeterminate="true" />}
                else
                {
                    <MudGrid>
                        @RenderSepervisionTable(UserSupervisions.EntriesSupervisors, true, false)
                        @RenderSepervisionTable(UserSupervisions.EntriesSupervisedUsers, false, false)
                    </MudGrid>
                }
            </NestedList>
        </MudListItem>
        <MudListItem Icon="@Icons.Material.AccountBalanceWallet" Text="Finance supervision">
            <NestedList>
                @if (UserSupervisions == null)
                {<MudProgressCircular Color="Color.Default" Indeterminate="true" />}
                else
                {
                    <MudGrid>
                        @RenderSepervisionTable(FinanceSupervisorToCollection, true, true)
                        @RenderSepervisionTable(UserSupervisions.FinanceSupervisedUsers, false, false)
                    </MudGrid>
                }
            </NestedList>
        </MudListItem>
    </MudList>
</MudContainer>

@code {
    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public bool isAdmin { get; set; }
    private UserSupervisionsDTO UserSupervisions;
    private List<UserListDTO> FinanceSupervisorToCollection;

    protected override async Task OnInitializedAsync()
    {
        UserSupervisions = await Http.GetFromJsonAsync<UserSupervisionsDTO>($"Users/supervision/{UserId}");
        FinanceSupervisorToCollection = new List<UserListDTO> { UserSupervisions.FinanceSupervisor };
        f();
    }

    private RenderFragment f()
    {
        return @<MudText Typo="Typo.h4" GutterBottom="true">Supervising users</MudText>;
    }
    
    private RenderFragment RenderSepervisionTable(ICollection<UserListDTO> supervisionCollection,
        bool IsSupervisor, bool isFinanceSupervisor)
    {
        return @<MudItem xs="6">
    @if (IsSupervisor)
    {
        <MudText Typo="Typo.h6" GutterBottom="true">Supervising users</MudText>
    }
    else
    {
        <MudText Typo="Typo.h6" GutterBottom="true">Supervised users</MudText>
    }
    @foreach (var item in supervisionCollection)
    {
        <MudGrid>
            <MudItem xs="4" Class="mt-2">
                <b>@item.Surname @item.Firstname</b>
            </MudItem>
            <MudItem xs="2">
                <MudButton ButtonType="ButtonType.Button" StartIcon="@Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary" OnClick="e => DeleteSupervision(item, supervisionCollection)">Delete</MudButton>
            </MudItem>
        </MudGrid>
    }
    @if (isAdmin)
    {
        @*<MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Add" OnClick="" Disabled="additionDisabled" Class="ml-3">Supervisor</MudButton>*@
    }
</MudItem>;
    }

    private string RenderUserName(UserListDTO user)
    {
        return user.Surname + " " + user.Firstname;
    }

    private void DeleteSupervision(UserListDTO user, ICollection<UserListDTO> collection)
    {
        collection.Remove(user);
    }

}
