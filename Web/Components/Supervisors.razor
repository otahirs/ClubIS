@inject HttpClient Http
@inject Searching Searching

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3">Supervisors</MudText>

    <MudList Clickable="true" Class="xs-12">
        <MudListItem Icon="@Icons.Material.StickyNote2" Text="Entries supervision">
            <NestedList>
                @if (UserSupervisions == null)
                {<MudProgressCircular Color="Color.Default" Indeterminate="true" />}
                else
                {
                    <MudGrid>
                        @RenderSepervisionTable(UserSupervisions.EntriesSupervisors, true, true, EntriesSupervisingForm)
                        @RenderSepervisionTable(UserSupervisions.EntriesSupervisedUsers, false, true, EntriesSupervisedUsersForm)
                    </MudGrid>
                }
            </NestedList>
        </MudListItem>
        <MudListItem Icon="@Icons.Material.AccountBalanceWallet" Text="Finance supervision">
            <NestedList>
                @if (UserSupervisions == null)
                {<MudProgressCircular Color="Color.Default" Indeterminate="true" />}
                else
                {
                    <MudGrid>
                        @RenderSepervisionTable(FinanceSupervisorToCollection, true, FinanceSupervisorToCollection.Count == 0, FinanceSupervisingForm)
                        @RenderSepervisionTable(UserSupervisions.FinanceSupervisedUsers, false, true, FinanceSupervisedUsersForm)
                    </MudGrid>
                }
            </NestedList>
        </MudListItem>
    </MudList>
    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-3" OnClick="SaveChanges">Save</MudButton>
</MudContainer>

@code {
    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public bool isAdmin { get; set; }
    private UserSupervisionsDTO UserSupervisions;
    private List<UserListDTO> FinanceSupervisorToCollection;
    private UserListDTO[] AllUsers;

    private Form EntriesSupervisingForm = new Form();
    private Form EntriesSupervisedUsersForm = new Form();
    private Form FinanceSupervisingForm = new Form();
    private Form FinanceSupervisedUsersForm = new Form();

    protected override async Task OnInitializedAsync()
    {
        UserSupervisions = await Http.GetFromJsonAsync<UserSupervisionsDTO>($"Users/supervision/{UserId}");
        FinanceSupervisorToCollection = new List<UserListDTO> { UserSupervisions.FinanceSupervisor };
        AllUsers = await Http.GetFromJsonAsync<UserListDTO[]>("Users");
    }

    private RenderFragment RenderSepervisionTable(ICollection<UserListDTO> supervisionCollection,
        bool IsSupervisor, bool enableAddition, Form form)
    {
        return@<MudItem xs="6">
        <MudText Typo="Typo.h6" GutterBottom="true">@(IsSupervisor ? "Supervising users" : "Supervised users")</MudText>
        @foreach (var item in supervisionCollection)
        {
            <MudGrid>
                <MudItem xs="7">
                    <b>@item.Surname @item.Firstname</b>
                </MudItem>
                <MudItem xs="5">
                    @if (isAdmin)
                    {
                        <MudButton ButtonType="ButtonType.Button" StartIcon="@Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary" OnClick="e => DeleteSupervision(item, supervisionCollection)">Delete</MudButton>
                    }
                </MudItem>
            </MudGrid>
        }
        @form.RenderedForm
        @if (isAdmin)
        {
            <MudButton Class="my-2" ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Add" OnClick="e => AddSupervisionForm(form, supervisionCollection)" Disabled="DisableSupervisionAddition(enableAddition, form, supervisionCollection)">Supervision</MudButton>
        }
        </MudItem>;
    }

    private string RenderUserName(UserListDTO user)
    {
        return user.Surname + " " + user.Firstname;
    }

    private void DeleteSupervision(UserListDTO user, ICollection<UserListDTO> collection)
    {
        collection.Remove(user);
    }

    private void AddSupervisionForm(Form form, ICollection<UserListDTO> supervisionCollection)
    {
    form.RenderedForm = @<MudGrid>
        <MudItem xs="7">
            <MudAutocomplete T="int" @bind-Value="form.bindedUserId" SearchFunc="Search" ToStringFunc="e => RenderUserName(GetAvailableUsers(supervisionCollection).First(u => e == u.Id))" For="(() => form.bindedUserId)" Variant="Variant.Outlined" ResetValueOnEmptyText="true" />
        </MudItem>
        <MudItem xs="5" Class="mt-4">
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="e => AddSupervision(form, supervisionCollection)">Add</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" StartIcon="@Filled.Close" OnClick="e => CancelForm(form)">Cancel</MudButton>
        </MudItem>
        </MudGrid>;
    }

    private ICollection<UserListDTO> GetAvailableUsers(ICollection<UserListDTO> supervisionCollection)
    {
        return AllUsers.Where(u => u.Id != UserId && !supervisionCollection.Any(s => s.Id == u.Id)).ToList();
    }

    private bool DisableSupervisionAddition(bool enableAddition, Form form, ICollection<UserListDTO> supervisionCollection)
    {
        return !enableAddition || form.RenderedForm != null || GetAvailableUsers(supervisionCollection).Count == 0;
    }

    private void CancelForm(Form form)
    {
        form.RenderedForm = null;
    }

    private async Task AddSupervision(Form form, ICollection<UserListDTO> supervisionCollection)
    {
        CancelForm(form);
        try
        {
            var user = await Http.GetFromJsonAsync<UserListDTO>($"Users/{form.bindedUserId}");
            supervisionCollection.Add(user);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task<IEnumerable<int>> Search(string searchValue)
    {
        return Searching.SearchItems(AllUsers, searchValue);
    }

    private class Form
    {
        public RenderFragment RenderedForm { get; set; }
        public int bindedUserId { get; set; }
    }

    private async Task SaveChanges()
    {
        if (FinanceSupervisorToCollection.Count == 0)
        {
            UserSupervisions.FinanceSupervisor = null;
        } else
        {
            UserSupervisions.FinanceSupervisor = FinanceSupervisorToCollection.First();
        }
        await Http.PutAsJsonAsync<UserSupervisionsDTO>("supervisions", UserSupervisions);
    }
}
