@inject HttpClient Http
@inject Searching Searching

<MudContainer MaxWidth="MaxWidth.ExtraLarge">

    <MudList Clickable="true" Class="xs-12">
        <MudListItem Icon="@Icons.Material.Filled.StickyNote2" Text="Entries supervision">
            <NestedList>
                @if (_userSupervisions == null)
                {
                    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
                }
                else
                {
                    <MudGrid>
                        @RenderSepervisionTable(_userSupervisions.EntriesSupervisors, true, true, _entriesSupervisingForm)
                        @RenderSepervisionTable(_userSupervisions.EntriesSupervisedUsers, false, true, _entriesSupervisedUsersForm)
                    </MudGrid>
                }
            </NestedList>
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.AccountBalanceWallet" Text="Finance supervision">
            <NestedList>
                @if (_userSupervisions == null)
                {
                    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
                }
                else
                {
                    <MudGrid>
                        @RenderSepervisionTable(_financeSupervisorToCollection, true, _financeSupervisorToCollection.Count == 0, _financeSupervisingForm)
                        @RenderSepervisionTable(_userSupervisions.FinanceSupervisedUsers, false, true, _financeSupervisedUsersForm)
                    </MudGrid>
                }
            </NestedList>
        </MudListItem>
    </MudList>
    @if (IsAdmin)
    {
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-3" OnClick="SaveChanges">Save</MudButton>
    }
</MudContainer>

@code {

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public bool IsAdmin { get; set; }

    private UserSupervisionsDTO _userSupervisions;
    private List<UserListDTO> _financeSupervisorToCollection = new();
    private UserListDTO[] _allUsers;

    private Form _entriesSupervisingForm = new();
    private Form _entriesSupervisedUsersForm = new();
    private Form _financeSupervisingForm = new();
    private Form _financeSupervisedUsersForm = new();

    protected override async Task OnInitializedAsync()
    {
        _userSupervisions = await Http.GetFromJsonAsync<UserSupervisionsDTO>($"Users/supervision/{UserId}");
        if (_userSupervisions.FinanceSupervisor != null)
            _financeSupervisorToCollection.Add(_userSupervisions.FinanceSupervisor);
        _allUsers = await Http.GetFromJsonAsync<UserListDTO[]>("Users");
    }

    private RenderFragment RenderSepervisionTable(ICollection<UserListDTO> supervisionCollection, bool isSupervisor, bool enableAddition, Form form)
    {
        return@<MudItem xs="6">
                  <MudText Typo="Typo.h6" GutterBottom="true">@(isSupervisor ? "Supervising users" : "Supervised users")</MudText>
                  @foreach (var item in supervisionCollection)
                  {
                      <MudGrid>
                          <MudItem xs="7">
                              <b>@item.Surname @item.Firstname</b>
                          </MudItem>
                          <MudItem xs="5">
                              @if (IsAdmin)
                              {
                                  <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary" OnClick="e => DeleteSupervision(item, supervisionCollection)">Delete</MudButton>
                              }
                          </MudItem>
                      </MudGrid>
                  }
                  @form.RenderedForm
                  @if (IsAdmin)
                  {
                      <MudButton Class="my-2" ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="e => AddSupervisionForm(form, supervisionCollection)" Disabled="DisableSupervisionAddition(enableAddition, form, supervisionCollection)">Supervision</MudButton>
                  }
              </MudItem>;
    }

    private string RenderUserName(UserListDTO user)
    {
        return user.Surname + " " + user.Firstname;
    }

    private void DeleteSupervision(UserListDTO user, ICollection<UserListDTO> collection)
    {
        collection.Remove(user);
    }

    private void AddSupervisionForm(Form form, ICollection<UserListDTO> supervisionCollection)
    {
        form.RenderedForm = @<MudGrid>
                                <MudItem xs="7">
                                    <MudAutocomplete T="int" @bind-Value="form.BindedUserId" SearchFunc="Search" ToStringFunc="e => RenderUserName(GetAvailableUsers(supervisionCollection).First(u => e == u.Id))" For="() => form.BindedUserId" Variant="Variant.Outlined" ResetValueOnEmptyText="true"/>
                                </MudItem>
                                <MudItem xs="5" Class="mt-4">
                                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="e => AddSupervision(form, supervisionCollection)">Add</MudButton>
                                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Material.Filled.Close" OnClick="e => CancelForm(form)">Cancel</MudButton>
                                </MudItem>
                            </MudGrid>;
    }

    private ICollection<UserListDTO> GetAvailableUsers(ICollection<UserListDTO> supervisionCollection)
    {
        return _allUsers.Where(u => u.Id != UserId && !supervisionCollection.Any(s => s.Id == u.Id)).ToList();
    }

    private bool DisableSupervisionAddition(bool enableAddition, Form form, ICollection<UserListDTO> supervisionCollection)
    {
        return !enableAddition || form.RenderedForm != null || GetAvailableUsers(supervisionCollection).Count == 0;
    }

    private void CancelForm(Form form)
    {
        form.RenderedForm = null;
    }

    private async Task AddSupervision(Form form, ICollection<UserListDTO> supervisionCollection)
    {
        CancelForm(form);
        try
        {
            var user = await Http.GetFromJsonAsync<UserListDTO>($"Users/{form.BindedUserId}");
            supervisionCollection.Add(user);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task<IEnumerable<int>> Search(string searchValue)
    {
        return Searching.SearchItems(_allUsers, searchValue);
    }

    private class Form
    {
        public RenderFragment RenderedForm { get; set; }
        public int BindedUserId { get; set; }
    }

    private async Task SaveChanges()
    {
        if (_financeSupervisorToCollection.Count == 0)
        {
            _userSupervisions.FinanceSupervisor = null;
        }
        else
        {
            _userSupervisions.FinanceSupervisor = _financeSupervisorToCollection.First();
        }
        await Http.PutAsJsonAsync("Users/supervision", _userSupervisions);
    }

}