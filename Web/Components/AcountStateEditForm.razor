@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3">Account state</MudText>
    @if (User == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <EditForm Model="@User" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudSelect T="AccountState" Label="Selected account state" Variant="Variant.Outlined" @bind-Value="User.AccountState">
                        @foreach (var state in GetAccountStateTypes())
                        {
                            <MudSelectItem T="AccountState" Value="state" />
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-2">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</MudContainer>

@code {
    [Parameter]
    public UserDTO User { get; set; }

    private static AccountState[] GetAccountStateTypes()
    {
        return (AccountState[])Enum.GetValues(typeof(AccountState));
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await Http.PutAsJsonAsync<UserDTO>("Users", User);
    }
}

