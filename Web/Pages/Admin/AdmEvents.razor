@page "/admin/events"
@attribute [Authorize(Policy = Policy.Events)]
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Admin events</MudText>

    @if (_displayedEvents == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <MudPaper Class="d-flex justify-space-between" Elevation="0">
            <MudTextField Class="ma-4" @bind-Value="_searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
            <MudSelect @bind-Value="_searchType" Label="Filter EventType" Class=" ma-4">
                @foreach (var type in _types)
                {
                    <MudSelectItem Value="@type"/>
                }
            </MudSelect>
        </MudPaper>
        <MudTable Items="@_displayedEvents" Filter="new Func<EventListDTO, bool>(FilterFunc)" OnRowClick="@((TableRowClickEventArgs<EventListDTO> e) => Navigate(e))" T="EventListDTO" Hover="true" Dense="true">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Place</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Deadlines</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@GetDate(context.StartDate, context.EndDate)</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Place">@context.Place</MudTd>
                <MudTd DataLabel="Type">@context.EventType</MudTd>
                <MudTd DataLabel="Deadlines">@GetDeadlines(context.Deadlines)</MudTd>
            </RowTemplate>
        </MudTable>

        <MudButton Class="mt-4" ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="Navigate">Event</MudButton>

        <div style="float: right;" class="mt-2">
            <MudToggleIconButton Toggled="@_includeArchivedEvents"
                                 ToggledChanged="ArchivedOptionChanged"
                                 Icon="@Icons.Material.Filled.Block"
                                 ToggledIcon="@Icons.Custom.Uncategorized.AlertSuccess"
                                 ToggledColor="@Color.Success"/>

            Archived events @(_includeArchivedEvents ? "included" : "excluded")
        </div>
    }
</MudContainer>

@code {
    private EventListDTO[] _events;
    private EventListDTO[] _displayedEvents;
    private readonly List<string> _types = Enum.GetNames(typeof(EventType)).Prepend("All").ToList();
    private string _searchType = "All";
    private string _searchString = "";
    private bool _includeArchivedEvents;

    protected override async Task OnInitializedAsync()
    {
        _events = await Http.GetFromJsonAsync<EventListDTO[]>("Events");

        DisplayNotArchivedEvents();
    }

    public void ArchivedOptionChanged(bool toggleValue)
    {
        _includeArchivedEvents = toggleValue;
        if (_includeArchivedEvents)
        {
            DisplayAllEvents();
        }
        else
        {
            DisplayNotArchivedEvents();
        }
    }

    private void DisplayAllEvents()
    {
        _displayedEvents = _events;
    }

    private void DisplayNotArchivedEvents()
    {
        _displayedEvents = _events.Where(e => e.EventState != EventState.Archived).ToArray();
    }

    bool FilterFunc(EventListDTO e)
    {
        _searchString ??= "";
        var eventData = $"{GetDate(e.StartDate, e.EndDate)} {e.Name} {e.Place} {e.EventType} {GetDeadlines(e.Deadlines)}";
        var eventType = e.EventType.ToString();

        return (_searchType == "All" || eventType.Contains(_searchType)) && eventData.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase);
    }

    private static string GetDate(DateTime start, DateTime end)
    {
        return start.Equals(end) ? end.ToString("dd.MM.yyyy") : start.ToString("dd.") + '-' + end.ToString("dd.MM.yyyy");
    }

    private static string GetDeadlines(ICollection<EventDeadline> deadlines)
    {
        return deadlines.Count != 0 ? deadlines.Select(d => d.Deadline.ToString("dd.MM.yyyy")).Aggregate((a, b) => a + ", " + b) : "";
    }

    private void Navigate()
    {
        NavigationManager.NavigateTo("/admin/events/edit");
    }

    private void Navigate(TableRowClickEventArgs<EventListDTO> obj)
    {
        Console.WriteLine(obj.Item.Id);
        NavigationManager.NavigateTo($"/admin/events/edit/{obj.Item.Id}");
    }

}