@page "/admin/finance/event/{eventId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = Policy.Finance)]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">

    <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="@(() => NavigationManager.NavigateTo("/admin/finance"))" Class="ml-3">back to finances</MudButton>
    @if (_e != null)
    {
        <EventHeader Event="_e"/>
    }
    @if (_eventPayments != null)
    {
        <MudForm @ref="_form">
            <MudTable Items="@_eventPayments">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>RegNum</MudTh>
                    <MudTh>Current Amount</MudTh>
                    <MudTh>New Amount</MudTh>
                    <MudTh>Note</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.RegistrationNumber</MudTd>
                    <MudTd>@(_oldAmounts[context.PaymentId] != 0 ? _oldAmounts[context.PaymentId] : "—")</MudTd>
                    <MudTd>
                        <MudTextField @bind-Value="@context.CreditAmount" For="() => context.CreditAmount"/>
                    </MudTd>
                    <MudTd>
                        <MudTextField @bind-Value="@context.Message" For="() => context.Message"/>
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="mt-4">Save</MudButton>
        </MudForm>
    }


</MudContainer>

@code {

    [Parameter]
    public int EventId { get; set; }

    private EventDTO _e;
    private List<PaymentEntryListDTO> _eventPayments;
    private Dictionary<int, int> _oldAmounts;
    private MudForm _form;

    protected override async Task OnInitializedAsync()
    {
        _e = await Http.GetFromJsonAsync<EventDTO>($"Events/{EventId}");
        await ReloadPayments();
    }

    private async Task ReloadPayments()
    {
        _eventPayments = await Http.GetFromJsonAsync<List<PaymentEntryListDTO>>($"Payments/events/{EventId}");
        _oldAmounts = _eventPayments.ToDictionary(p => p.PaymentId, p => p.CreditAmount ?? 0);
    }

    private async Task Submit()
    {
        _form.Validate();
        if (_form.IsValid)
        {
            await Http.PostAsJsonAsync($"Payments/events/{EventId}", _eventPayments);
            await ReloadPayments();
        }
    }

}