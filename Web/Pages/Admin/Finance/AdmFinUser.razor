@page "/admin/finance/user/{userId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = Policy.Finance)]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">

    <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="@(() => NavigationManager.NavigateTo("/admin/finance/1"))" Class="ml-3">back to finances</MudButton>
    @if (_financeStatement != null)
    {
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h3">@_financeStatement.Name</MudText>
                <FinanceStatement Statement="_financeStatement"/>
            </MudItem>
            <MudItem md="6" xs="12">
                <EditForm Model="@_giveCredit" OnValidSubmit="SubmitGiveCredit">
                    <DataAnnotationsValidator/>
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Give credit</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudTextField Label="Amount" @bind-Value="_giveCredit.CreditAmount" For="@(() => _giveCredit.CreditAmount)" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Add"/>
                            <MudTextField Label="Note" @bind-Value="_giveCredit.Message" For="@(() => _giveCredit.Message)" Variant="Variant.Outlined"/>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Send</MudButton>
                        </MudCardActions>
                    </MudCard>
                </EditForm>
            </MudItem>
            <MudItem md="6" xs="12">
                <EditForm Model="@_takeCredit" OnValidSubmit="SubmitTakeCredit">
                    <DataAnnotationsValidator/>
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Take away credit</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudTextField Label="Amount" @bind-Value="_takeCredit.CreditAmount" For="@(() => _takeCredit.CreditAmount)" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Remove"/>
                            <MudTextField Label="Note" @bind-Value="_takeCredit.Message" For="@(() => _takeCredit.Message)" Variant="Variant.Outlined"/>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Send</MudButton>
                        </MudCardActions>
                    </MudCard>
                </EditForm>
            </MudItem>
            <MudItem md="6" xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Transfer to another user</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <FinanceUserCreditTransferForm SourceUserId="@_financeStatement.UserId" SourceUserName="@_financeStatement.Name" AvailableFunds="_financeStatement.CreditBalance" OnAfterSubmit="ReloadFinanceStatement"/>
                    </MudCardContent>
                 </MudCard>
            </MudItem>
        </MudGrid>
    }


</MudContainer>

@code {

    [Parameter]
    public int UserId { get; set; }

    private FinanceStatementDTO _financeStatement;
    private readonly PaymentGiveCreditDTO _giveCredit = new();
    private readonly PaymentTakeCreditDTO _takeCredit = new();


    protected override async Task OnInitializedAsync()
    {
        await ReloadFinanceStatement();
        _giveCredit.RecipientUserId = UserId;
        _takeCredit.SourceUserId = UserId;
    }

    private async Task ReloadFinanceStatement()
    {
        _financeStatement = (await Http.GetFromJsonAsync<List<FinanceStatementDTO>>($"Payments/statements/{UserId}")).First();
    }

    private async Task SubmitGiveCredit()
    {
        await Http.PostAsJsonAsync("Payments/give-credit", _giveCredit);
        await ReloadFinanceStatement();
    }

    private async Task SubmitTakeCredit()
    {
        await Http.PostAsJsonAsync("Payments/take-credit", _takeCredit);
        await ReloadFinanceStatement();
    }

}