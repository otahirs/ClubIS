@page "/admin/entries"
@attribute [Authorize(Policy = Policy.Entries)]
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudBreadcrumbs Items="_breadCrumbs"></MudBreadcrumbs>
    <MudText Typo="Typo.h3" GutterBottom="true">Admin entries</MudText>
    @if (_events == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <MudPaper Class="d-flex justify-space-between" Elevation="0">
            <MudTextField Class="ma-4" @bind-Value="_searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
            <MudSelect @bind-Value="_searchType" Label="Filter EventType" Class=" ma-4">
                @foreach (var type in _types)
                {
                    <MudSelectItem Value="@type"/>
                }
            </MudSelect>
        </MudPaper>
        <MudTable Items="@_events" Filter="new Func<EventListDTO, bool>(FilterFunc)" OnRowClick="@(e => Navigate(e))" T="EventListDTO" Hover="true" Dense="true">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Place</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Deadlines</MudTh>
                <MudTh>EntriesExport</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@GetDate(context.StartDate, context.EndDate)</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Place">@context.Place</MudTd>
                <MudTd DataLabel="Type">@context.EventType</MudTd>
                <MudTd DataLabel="Deadlines">@GetDeadlines(context.Deadlines)</MudTd>
                <MudTd DataLabel="EntriesExport">
                    @if (context.Entries == EntriesExport.OK)
                    {
                        <MudChip Size="Size.Small" Label="true" Color="Color.Success">@context.Entries</MudChip>
                    }
                    else
                    {
                        <MudChip Size="Size.Small" Label="true" Color="Color.Warning">@context.Entries</MudChip>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private readonly List<BreadcrumbItem> _breadCrumbs = new()
    {
        new BreadcrumbItem("Admin", null, true),
        new BreadcrumbItem("Entries", "/admin/entries")
    };

    private EventListDTO[] _events;
    private readonly List<string> _types = Enum.GetNames(typeof(EventType)).Prepend("All").ToList();
    private string _searchType = "All";
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        _events = await Http.GetFromJsonAsync<EventListDTO[]>("Events/");
    }

    bool FilterFunc(EventListDTO e)
    {
        var eventData = $"{GetDate(e.StartDate, e.EndDate)} {e.Name} {e.Place} {e.EventType} {GetDeadlines(e.Deadlines)}";
        var eventType = e.EventType.ToString();
        return (_searchType == "All" || eventType.Contains(_searchType)) && Searching.FilterFunc(eventData, _searchString);
    }

    private static string GetDate(DateTime start, DateTime end)
    {
        return start.Equals(end) ? end.ToString("dd.MM.yyyy") : start.ToString("dd.") + '-' + end.ToString("dd.MM.yyyy");
    }

    private static string GetDeadlines(ICollection<EventDeadline> deadlines)
    {
        return deadlines.Count != 0 ? deadlines.Select(d => d.Deadline.ToString("dd.MM.yyyy")).Aggregate((a, b) => a + ", " + b) : "";
    }


    private void Navigate(TableRowClickEventArgs<EventListDTO> obj)
    {
        NavigationManager.NavigateTo($"/admin/entries/{obj.Item.Id}");
    }

}