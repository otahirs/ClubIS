@page "/admin/users"

@attribute [Authorize(Policy = Policy.Users)]

@inject HttpClient Http

@using MudBlazor.Components.Table

@inject NavigationManager NavigationManager
@inject Searching Searching

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Admin users</MudText>

    <MudToggleIconButton Toggled="@includeArchivedUsers" ToggledChanged="(toggleValue) => ArchivedOptionChanged(toggleValue)"
                         Icon="@Icons.Material.Block" Color="@Color.Error"
                         ToggledIcon="@Icons.Custom.AlertSuccess" ToggledColor="@Color.Success" />

    <span>Archived users @(includeArchivedUsers ? "included" : "excluded")</span>
    @if (displayedUsers == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="displayedUsers" Filter="new Func<UserListDTO, bool>(FilterFunc)" Hover="true" SortLabel="Sort By" OnRowClick="@((TableRowClickEventArgs<UserListDTO> e)=> Navigate(e.Item))">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Search" IconSize="Size.Medium"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UserListDTO, object>(x=>x.Surname)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<UserListDTO, object>(x=>x.RegistrationNumber)">RegNum</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<UserListDTO, object>(x=>x.AccountState)">State</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Surname @context.Firstname</MudTd>
                <MudTd DataLabel="RegNum">@context.RegistrationNumber</MudTd>
                <MudTd DataLabel="State">@context.AccountState</MudTd>
                <MudTd DataLabel="Permissions"></MudTd>
            </RowTemplate>
        </MudTable>
    }
    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Add" OnClick="Navigate" Class="ml-auto mt-2">User</MudButton>
</MudContainer>

@code {
    private UserListDTO[] users;

    private UserListDTO[] displayedUsers;

    private bool includeArchivedUsers = true;

    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<UserListDTO[]>("Users");
        DisplayAllUsers();
    }

    public void ArchivedOptionChanged(bool toggleValue)
    {
        includeArchivedUsers = toggleValue;
        if (includeArchivedUsers)
        {
            DisplayAllUsers();
        }
        else
        {
            DisplayNotArchivedUsers();
        }
    }

    private void DisplayAllUsers()
    {
        displayedUsers = users;
    }

    private void DisplayNotArchivedUsers()
    {
        displayedUsers = users.Where(user => user.AccountState != AccountState.Archived).ToArray();
    }

    protected void Navigate(UserListDTO u)
    {
        NavigationManager.NavigateTo($"/admin/users/settings/{u.Id}");
    }

    bool FilterFunc(UserListDTO u)
    {
        return Searching.FilterFunc($"{u.Firstname} {u.Surname} {u.RegistrationNumber} {u.AccountState}", searchString);
    }

    protected void Navigate()
    {
        NavigationManager.NavigateTo($"/admin/users/create");
    }
}