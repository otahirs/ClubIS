@page "/admin/entries/{eventId:int}"
@inject HttpClient Http
@attribute [Authorize(Policy = Policy.Entries)]
@inject IdentityAuthenticationStateProvider authState
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    @if (e == null || entries == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudCard Elevation="0">
            <MudCardContent>
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText Typo="Typo.h3">@e.Name</MudText>
                    </TitleContent>
                    <ChildContent>
                        <MudText><b>Place:</b> @e.Place</MudText>
                        <MudText><b>Organizer:</b> @e.Organizer</MudText>
                        <MudText><b>Leader:</b> @e.Leader</MudText>
                        <MudText><b>Start date:</b> @e.StartDate.ToString("dd.MM.yyyy")</MudText>
                        <MudText><b>End date:</b> @e.EndDate.ToString("dd.MM.yyyy")</MudText>
                        <MudText><b>Event type:</b> @e.EventType</MudText>
                        <MudText><b>Link:</b> <MudLink Href="@GetLink()">@e.Link</MudLink></MudText>
                        <MudText><b>Deadlines:</b> @GetDeadlines()</MudText>
                        <MudText><b>Class options:</b> @GetClassOptions()</MudText>
                        <MudText><b>Event state:</b> @e.EventState</MudText>
                        <MudText><b>Event properties:</b> @e.EventProperties</MudText>
                        <MudText><b>Event stages:</b> @GetStages()</MudText>
                        <MudText><b>Note:</b> @e.Note</MudText>
                    </ChildContent>
                </MudExpansionPanel>
                <MudText Typo="Typo.h5" GutterBottom="true">Entries</MudText>
                <MudTable Items="@entries" Dense="true">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Class</MudTh>
                        <MudTh>SiNum</MudTh>
                        <MudTh>Note(i)</MudTh>
                        <MudTh>Note(org)</MudTh>
                        <MudTh>Stages</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Class">@context.Class</MudTd>
                        <MudTd DataLabel="SiNum">@context.SiCardNumber</MudTd>
                        <MudTd DataLabel="Note(i)">@context.NoteForClub</MudTd>
                        <MudTd DataLabel="Note(org)">@context.NoteForOrganisator</MudTd>
                        <MudTd DataLabel="Stages">@GetStages(context.EnteredStages)</MudTd>
                        <MudTd DataLabel="Status">
                            @if (context.Status == EntryStatus.Ok)
                                {
                                <MudChip Size="Size.Small" Label="true" Color="Color.Success">@context.Status</MudChip>

                                }
                                else if (context.Status == EntryStatus.Changed)
                                {
                                <MudChip Size="Size.Small" Label="true" Color="Color.Warning">@context.Status</MudChip>
                                }
                                else
                                {
                                <MudChip Size="Size.Small" Label="true" Color="Color.Error">@context.Status</MudChip>
                                }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
            <MudCardActions>

                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Material.Filled.Close" OnClick="Navigate" Class="ml-3">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" Class="ml-auto" OnClick="() => SetAllNotSend()">
                    Not Sent
                </MudButton>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Success" Class="mx-2" OnClick="() => SetAllResolved()">
                    Resolved
                </MudButton>
            </MudCardActions>
        </MudCard>
    }

</MudContainer>

@code {
    [Parameter]
    public int eventId { get; set; }
    private EventEditDTO e;
    private EventEntryListDTO[] entries;

    protected override async Task OnInitializedAsync()
    {
        e = await Http.GetFromJsonAsync<EventEditDTO>($"Events/{eventId}");
        entries = await GetEntries();
    }

    private string GetStages(ISet<EventStageDTO> enteredStages)
    {
        return (enteredStages.Count != 0) ? enteredStages.Select(s => s.Name).Aggregate((a, b) => a + ", " + b) : "";
    }

    private string GetLink()
    {
        return "https://" + e.Link;
    }

    private string GetDeadlines()
    {
        return (e.Deadlines.Count != 0) ? e.Deadlines.Select(d => d.Deadline.ToString("dd.MM.yyyy")).Aggregate((a, b) => a + ", " + b) : "";
    }

    private string GetClassOptions()
    {
        return e.ClassOptions.Select(a => a.Name).Aggregate((a, b) => a + ", " + b);
    }

    private string GetStages()
    {
        return (e.EventStages.Count != 0) ? e.EventStages.Select(s => s.Name).Aggregate((a, b) => a + ", " + b) : "";
    }

    private async Task SetAllNotSend()
    {
        foreach (var entry in entries)
        {
            if (entry.Status == EntryStatus.Ok)
            {
                await UpdateStatus(entry, EntryStatus.NotSent);
            }
        }
        entries = await GetEntries();
    }

    private async Task SetAllResolved()
    {
        foreach (var entry in entries)
        {
            if (entry.Status != EntryStatus.Ok)
            {
                if (entry.Status == EntryStatus.Removed)
                {
                    await Http.DeleteAsync($"Entries/{entry.Id}");
                }
                else
                {
                    await UpdateStatus(entry, EntryStatus.Ok);
                }
            }
        }
        entries = await GetEntries();
        await SetEvent();
    }
    private async Task<EventEntryListDTO[]> GetEntries()
    {
        return (await Http.GetFromJsonAsync<EventEntryListDTO[]>($"Entries/event/{eventId}")).OrderBy(e => e.Status).ToArray();
    }

    private async Task UpdateStatus(EventEntryListDTO entry, EntryStatus status)
    {
        var tmp = new EventEntryEditDTO
        {
            Id = entry.Id,
            UserId = entry.UserId,
            EventId = eventId,
            Class = entry.Class,
            HasClubAccommodation = entry.HasClubAccommodation,
            HasClubTransport = entry.HasClubTransport,
            NoteForClub = entry.NoteForClub,
            NoteForOrganisator = entry.NoteForOrganisator,
            SiCardNumber = entry.SiCardNumber,
            EnteredStages = entry.EnteredStages,
            Status = status
        };
        await Http.PutAsJsonAsync<EventEntryEditDTO>("Entries", tmp);
    }

    private async Task SetEvent()
    {
        var ev = new EventEditDTO
        {
            Id = e.Id,
            StartDate = e.StartDate,
            EndDate = e.EndDate,
            Name = e.Name,
            Place = e.Place,
            Organizer = e.Organizer,
            EventType = e.EventType,
            Link = e.Link,
            Deadlines = e.Deadlines,
            Leader = e.Leader,
            ClassOptions = e.ClassOptions,
            EventState = e.EventState,
            EventProperties = e.EventProperties,
            Note = e.Note,
            EventStages = e.EventStages,
            Entries = EntriesExport.OK
        };
        await Http.PutAsJsonAsync<EventEditDTO>("Events", ev);
    }

    private void Navigate()
    {
        NavigationManager.NavigateTo($"/admin/entries");
    }

}