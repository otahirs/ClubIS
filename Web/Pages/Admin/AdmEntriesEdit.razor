@page "/admin/entries/{eventId:int}"
@inject HttpClient Http
@attribute [Authorize(Policy = Policy.Entries)]
@inject IdentityAuthenticationStateProvider AuthState
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    @if (_e == null || _entries == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <MudCard Elevation="0">
            <MudCardContent>
                <EventHeader Event="_e"/>
                <MudText Typo="Typo.h5" GutterBottom="true">Entries</MudText>
                <MudTable Items="@_entries" Dense="true">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Class</MudTh>
                        <MudTh>SiNum</MudTh>
                        <MudTh>Note(i)</MudTh>
                        <MudTh>Note(org)</MudTh>
                        <MudTh>Stages</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Class">@context.Class</MudTd>
                        <MudTd DataLabel="SiNum">@context.SiCardNumber</MudTd>
                        <MudTd DataLabel="Note(i)">@context.NoteForClub</MudTd>
                        <MudTd DataLabel="Note(org)">@context.NoteForOrganisator</MudTd>
                        <MudTd DataLabel="Stages">@GetStages(context.EnteredStages)</MudTd>
                        <MudTd DataLabel="Status">
                            @if (context.Status == EntryStatus.Ok)
                            {
                                <MudChip Size="Size.Small" Label="true" Color="Color.Success">@context.Status</MudChip>
                            }
                            else if (context.Status == EntryStatus.Changed)
                            {
                                <MudChip Size="Size.Small" Label="true" Color="Color.Warning">@context.Status</MudChip>
                            }
                            else
                            {
                                <MudChip Size="Size.Small" Label="true" Color="Color.Error">@context.Status</MudChip>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
            <MudCardActions>

                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Material.Filled.Close" OnClick="Navigate" Class="ml-3">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" Class="ml-auto" OnClick="() => SetAllNotSend()">
                    Not Sent
                </MudButton>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Success" Class="mx-2" OnClick="() => SetAllResolved()">
                    Resolved
                </MudButton>
            </MudCardActions>
        </MudCard>
    }

</MudContainer>

@code {

    [Parameter]
    public int EventId { get; set; }

    private EventDTO _e;
    private List<EventEntryDTO> _entries;

    protected override async Task OnInitializedAsync()
    {
        _e = await Http.GetFromJsonAsync<EventDTO>($"Events/{EventId}");
        await ReloadEntries();
    }

    private string GetStages(ISet<EventStageDTO> enteredStages)
    {
        return enteredStages.Count != 0 ? enteredStages.Select(s => s.Name).Aggregate((a, b) => a + ", " + b) : "";
    }

    private async Task SetAllNotSend()
    {
        foreach (var entry in _entries)
        {
            if (entry.Status == EntryStatus.Ok)
            {
                await UpdateStatus(entry, EntryStatus.NotSent);
            }
        }
        await ReloadEntries();
    }

    private async Task SetAllResolved()
    {
        foreach (var entry in _entries)
        {
            if (entry.Status != EntryStatus.Ok)
            {
                if (entry.Status == EntryStatus.Removed)
                {
                    await Http.DeleteAsync($"Entries/{entry.Id}");
                }
                else
                {
                    await UpdateStatus(entry, EntryStatus.NotSent);
                }
            }
        }
        await ReloadEntries();
        _e.Entries = EntriesExport.OK;
        await Http.PutAsJsonAsync("Events", _e);
    }

    private async Task ReloadEntries()
    {
        _entries = (await Http.GetFromJsonAsync<List<EventEntryDTO>>($"Entries/event/{EventId}")).OrderBy(e => e.Status).ToList();
    }

    private async Task UpdateStatus(EventEntryDTO entry, EntryStatus status)
    {
        entry.Status = EntryStatus.Ok;
        await Http.PutAsJsonAsync("Entries", entry);
    }

    private void Navigate()
    {
        NavigationManager.NavigateTo("/admin/entries");
    }

}