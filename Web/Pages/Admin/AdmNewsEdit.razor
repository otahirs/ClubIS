@page "/admin/news/edit/{newsId:int}"
@page "/admin/news/create"

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IdentityAuthenticationStateProvider AuthStateProvider
@attribute [Authorize(Policy = Policy.News)]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    @if (_sendNews == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <EditForm Model="@_sendNews" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudTextField Label="Title" @bind-Value="_sendNews.Title" For="@(() => _sendNews.Title)" Variant="Variant.Outlined"/>
                    <MudTextField Label="Text" @bind-Value="_sendNews.Text" For="@(() => _sendNews.Text)" Variant="Variant.Outlined" Lines="7"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Material.Filled.Close" OnClick="Navigate" Class="ml-3">Cancel</MudButton>
                    @if (NewsId != null)
                    {
                        <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary" OnClick="RemoveNews" Class="ml-auto">Remove</MudButton>
                    }
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-2">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</MudContainer>

@code {

    [Parameter]
    public int? NewsId { get; set; }

    private NewsEditDTO _sendNews;

    protected override async Task OnInitializedAsync()
    {
        if (NewsId == null)
        {
            _sendNews = new NewsEditDTO {UserId = await AuthStateProvider.GetUserId()};
        }
        else
        {
            _sendNews = await Http.GetFromJsonAsync<NewsEditDTO>($"News/{NewsId}");
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (NewsId == null)
        {
            _sendNews.Date = DateTime.Now;
            await Http.PostAsJsonAsync("News", _sendNews);
        }
        else
        {
            await Http.PutAsJsonAsync("News", _sendNews);
        }
        Navigate();
    }

    private async Task RemoveNews()
    {
        await Http.DeleteAsync($"News/{NewsId}");
        Navigate();
    }

    private void Navigate()
    {
        NavigationManager.NavigateTo("/admin/news");
    }

}