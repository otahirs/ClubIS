@page "/admin/users"

@attribute [Authorize(Policy = Policy.Users)]

@inject HttpClient Http

@inject NavigationManager NavigationManager
@inject Searching Searching

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Admin users</MudText>

    @if (_displayedUsers == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <MudPaper Class="d-flex justify-space-between" Elevation="0">
            <MudTextField Class="ma-4" @bind-Value="_searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        </MudPaper>
        <MudTable Items="_displayedUsers" Filter="new Func<UserPermListDTO, bool>(FilterFunc)" Hover="true" Dense="true" SortLabel="Sort By" OnRowClick="@((TableRowClickEventArgs<UserPermListDTO> e) => Navigate(e.Item))">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UserPermListDTO, object>(x => x.Surname)">Name</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserPermListDTO, object>(x => x.RegistrationNumber)">RegNum</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserPermListDTO, object>(x => x.AccountState)">State</MudTableSortLabel>
                </MudTh>
                <MudTh>Permissions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Surname @context.Firstname</MudTd>
                <MudTd DataLabel="RegNum">@context.RegistrationNumber</MudTd>
                <MudTd DataLabel="State">@context.AccountState</MudTd>
                <MudTd DataLabel="Permissions">@string.Join(", ", context.Permissions)</MudTd>
            </RowTemplate>
        </MudTable>
        <MudButton Class="mt-4" ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="Navigate">User</MudButton>

        <div style="float: right;" class="mt-2">
            <MudToggleIconButton Toggled="@_includeArchivedUsers"
                                 ToggledChanged="toggleValue => ArchivedOptionChanged(toggleValue)"
                                 Icon="@Icons.Material.Filled.Block"
                                 ToggledIcon="@Icons.Custom.Uncategorized.AlertSuccess"
                                 ToggledColor="@Color.Success"/>

            Archived users @(_includeArchivedUsers ? "included" : "excluded")
        </div>
    }
</MudContainer>

@code {
    private UserPermListDTO[] _users;

    private UserPermListDTO[] _displayedUsers;

    private bool _includeArchivedUsers;

    private  string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        _users = await Http.GetFromJsonAsync<UserPermListDTO[]>("Users/permissions");
        DisplayNotArchivedUsers();
    }

    private void ArchivedOptionChanged(bool toggleValue)
    {
        _includeArchivedUsers = toggleValue;
        if (_includeArchivedUsers)
        {
            DisplayAllUsers();
        }
        else
        {
            DisplayNotArchivedUsers();
        }
    }

    private void DisplayAllUsers()
    {
        _displayedUsers = _users;
    }

    private void DisplayNotArchivedUsers()
    {
        _displayedUsers = _users.Where(user => user.AccountState != AccountState.Archived).ToArray();
    }

    private void Navigate(UserPermListDTO u)
    {
        NavigationManager.NavigateTo($"/admin/users/settings/{u.Id}");
    }

    bool FilterFunc(UserPermListDTO u)
    {
        return Searching.FilterFunc($"{u.Firstname} {u.Surname} {u.RegistrationNumber} {u.AccountState}", _searchString);
    }

    private void Navigate()
    {
        NavigationManager.NavigateTo("/admin/users/create");
    }

}