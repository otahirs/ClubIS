@page "/admin/events/edit"
@page "/admin/events/edit/{eventId:int}"
@attribute [Authorize(Policy = Policy.Events)]
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudBreadcrumbs Items="_breadCrumbs"></MudBreadcrumbs>
    @if (_sendEvent == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        @if (EventId == null)
        {
            <MudText Typo="Typo.h3" GutterBottom="true">Create event</MudText>
        }
        else
        {
            <MudText Typo="Typo.h3" GutterBottom="true">Edit event</MudText>
        }
        <EditForm Model="@_sendEvent" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudTextField Label="Name" @bind-Value="_sendEvent.Name" For="@(() => _sendEvent.Name)" Variant="Variant.Outlined"/>

                    <MudTextField Label="Place" @bind-Value="_sendEvent.Place" For="@(() => _sendEvent.Place)" Variant="Variant.Outlined"/>

                    <MudDatePicker Label="Start date" TextChanged="@(s => UpdateStartDate(s))" Text="@_sendEvent.StartDate.ToString("yyyy-MM-dd")" DisableToolbar="true" Class="mx-2"/>

                    <MudDatePicker Label="End date" TextChanged="@(s => UpdateEndDate(s))" Text="@_sendEvent.EndDate.ToString("yyyy-MM-dd")" DisableToolbar="true" Class="mx-2"/>

                    <MudTextField Label="Organizer" @bind-Value="_sendEvent.Organizer" For="@(() => _sendEvent.Organizer)" Variant="Variant.Outlined"/>

                    <MudTextField Label="Leader" @bind-Value="_sendEvent.Leader" For="@(() => _sendEvent.Leader)" Variant="Variant.Outlined"/>

                    <MudSelect @bind-Value="_sendEvent.EventType" Label="Event type" Variant="Variant.Outlined">
                        @foreach (var type in GetTypes())
                        {
                            <MudSelectItem Value="@type"/>
                        }
                    </MudSelect>

                    <MudSelect @bind-Value="_sendEvent.AccommodationOption" Label="Accommodation Option" Variant="Variant.Outlined">
                        @foreach (var type in GetOptions())
                        {
                            <MudSelectItem Value="@type"/>
                        }
                    </MudSelect>

                    <MudSelect @bind-Value="_sendEvent.TransportOption" Label="Transport Option" Variant="Variant.Outlined">
                        @foreach (var type in GetOptions())
                        {
                            <MudSelectItem Value="@type"/>
                        }
                    </MudSelect>

                    <MudSelect @bind-Value="_sendEvent.EventState" Label="Event state" Variant="Variant.Outlined">
                        @foreach (var state in GetStates())
                        {
                            <MudSelectItem Value="@state"/>
                        }
                    </MudSelect>

                    <MudCard Class="mt-1">
                        <MudCardContent>
                            @foreach (var c in _sendEvent.ClassOptions)
                            {
                                <MudChip Color="Color.Default" OnClose="() => RemoveClass(c)">@c.Name</MudChip>
                            }

                            <MudTextField Label="Class options" @bind-Value="_currentClassOption" Variant="Variant.Outlined"/>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" OnClick="AddClass">Class</MudButton>
                        </MudCardActions>
                        <ValidationMessage For="@(() => _sendEvent.ClassOptions)" class="validation-message"/>
                    </MudCard>

                    <MudTextField Label="Link" @bind-Value="_sendEvent.Link" For="@(() => _sendEvent.Link)" Variant="Variant.Outlined"/>

                    <MudTextField Label="Note" @bind-Value="_sendEvent.Note" For="@(() => _sendEvent.Note)" Variant="Variant.Outlined"/>

                    <MudCard Class="mt-1">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">Deadlines:</MudText>
                            @foreach (var d in _sendEvent.Deadlines)
                            {
                                <MudCard Outlined="true">
                                    <MudCardContent>
                                        <MudDatePicker Label="Deadline" TextChanged="@(s => UpdateDeadline(s, d))" Text="@d.Deadline.ToString("yyyy-MM-dd")" DisableToolbar="true" Class="mx-2"/>
                                        @if (_sendEvent.Deadlines.Count > 1)
                                        {
                                            <MudIconButton Icon="@Icons.Filled.Delete" Size="Size.Medium" Color="Color.Error" OnClick="() => RemoveDeadline(d)"></MudIconButton>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            }
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" OnClick="AddDeadline">Deadline</MudButton>
                        </MudCardActions>
                    </MudCard>

                    <MudCard Class="mt-1">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">
                                <b>Event Stages:</b>
                            </MudText>
                            @foreach (var s in _sendEvent.EventStages)
                            {
                                <MudCard>
                                    <MudCardContent>
                                        <MudGrid>
                                            <MudItem xs="6">
                                                <MudTextField Label="Stage name" @bind-Value="s.Name" For="@(() => s.Name)" Variant="Variant.Outlined"/>
                                            </MudItem>
                                            <MudDatePicker Label="Stage date" TextChanged="@(st => UpdateStageDate(st, s))" Text="@s.Date.ToString("yyyy-MM-dd")" DisableToolbar="true" Class="mx-2"/>

                                            <MudIconButton Icon="@Icons.Filled.Delete" Size="Size.Medium" Color="Color.Error" OnClick="() => RemoveStage(s)"></MudIconButton>
                                        </MudGrid>
                                    </MudCardContent>
                                </MudCard>
                            }

                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" OnClick="AddStage">Stage</MudButton>
                        </MudCardActions>
                    </MudCard>

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Filled.Close" OnClick="Navigate" Class="ml-3">Cancel</MudButton>
                    @if (EventId == null)
                    {
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    }
                    else
                    {
                        <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary" OnClick="RemoveEvent" Class="ml-auto">Remove</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-2">Save</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</MudContainer>

@code {

    [Parameter]
    public int? EventId { get; set; }
    
    private readonly List<BreadcrumbItem> _breadCrumbs = new()
    {
        new BreadcrumbItem("Admin", null, true),
        new BreadcrumbItem("Events", "/admin/events")
    };
    
    private EventDTO _sendEvent;
    private string _currentClassOption;

    protected override async Task OnInitializedAsync()
    {
        if (EventId == null)
        {
            _sendEvent = new EventDTO
            {
                StartDate = DateTime.Today,
                EndDate = DateTime.Today,
                EventType = GetTypes()[0],
                EventState = GetStates()[0],
                TransportOption = GetOptions()[0],
                AccommodationOption = GetOptions()[0],
                ClassOptions = new HashSet<EventClassOption>(),
                Deadlines = new List<EventDeadline>(),
                EventStages = new HashSet<EventStageDTO>()
            };
            AddDeadline();
            _breadCrumbs.Add(new BreadcrumbItem("Create", NavigationManager.Uri));
        }
        else
        {
            _sendEvent = await Http.GetFromJsonAsync<EventDTO>($"Events/{EventId}");
            _breadCrumbs.Add(new BreadcrumbItem("Edit", NavigationManager.Uri));
        }
    }

    private void UpdateStartDate(string date)
    {
        _sendEvent.StartDate = DateTime.Parse(date);
        _sendEvent.EndDate = DateTime.Parse(date);
    }

    private void UpdateEndDate(string date)
    {
        _sendEvent.EndDate = DateTime.Parse(date);
    }

    private static EventType[] GetTypes()
    {
        return (EventType[]) Enum.GetValues(typeof(EventType));
    }

    private static ClubEventOption[] GetOptions()
    {
        return (ClubEventOption[]) Enum.GetValues(typeof(ClubEventOption));
    }

    private static EventState[] GetStates()
    {
        return (EventState[]) Enum.GetValues(typeof(EventState));
    }

    private void AddClass()
    {
        if (string.IsNullOrWhiteSpace(_currentClassOption))
            return;
        var newClass = new EventClassOption
        {
            Name = _currentClassOption
        };
        _currentClassOption = "";
        _sendEvent.ClassOptions.Add(newClass);
        StateHasChanged();
    }

    private void RemoveClass(EventClassOption c)
    {
        _sendEvent.ClassOptions.Remove(c);
        StateHasChanged();
    }

    private void AddDeadline()
    {
        var newDeadline = new EventDeadline
        {
            Deadline = DateTime.Today
        };
        _sendEvent.Deadlines.Add(newDeadline);
    }

    private static void UpdateDeadline(string date, EventDeadline d)
    {
        d.Deadline = DateTime.Parse(date);
    }

    private void RemoveDeadline(EventDeadline d)
    {
        _sendEvent.Deadlines.Remove(d);
    }

    private void AddStage()
    {
        var newStage = new EventStageDTO
        {
            Date = DateTime.Today
        };
        _sendEvent.EventStages.Add(newStage);
    }

    private static void UpdateStageDate(string date, EventStageDTO s)
    {
        s.Date = DateTime.Parse(date);
    }

    private void RemoveStage(EventStageDTO s)
    {
        _sendEvent.EventStages.Remove(s);
    }

    private async void OnValidSubmit(EditContext context)
    {
        if (EventId == null)
        {
            await Http.PostAsJsonAsync("Events", _sendEvent);
        }
        else
        {
            await Http.PutAsJsonAsync("Events", _sendEvent);
        }
        NavigationManager.NavigateTo("/admin/events");
    }


    private async void RemoveEvent()
    {
        await Http.DeleteAsync($"Events/{EventId}");
        NavigationManager.NavigateTo("/admin/events");
    }

    private void Navigate()
    {
        NavigationManager.NavigateTo("/admin/events");
    }

}