@page "/admin/events/edit"
@page "/admin/events/edit/{eventId:int}"
@attribute [Authorize(Policy = Policy.Events)]
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    @if (sendEvent == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        @if (eventId == null)
        {
            <MudText Typo="Typo.h3" GutterBottom="true">Create event</MudText>
        }
        else
        {
            <MudText Typo="Typo.h3" GutterBottom="true">Edit event</MudText>

        }
        <EditForm Model="@sendEvent" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudTextField Label="Name" @bind-Value="sendEvent.Name" For="@(() => sendEvent.Name)" Variant="Variant.Outlined" />

                    <MudTextField Label="Place" @bind-Value="sendEvent.Place" For="@(() => sendEvent.Place)" Variant="Variant.Outlined" />

                    <MudDatePicker Label="Start date"  TextChanged="@((string s) => UpdateStartDate(s))" Text="@sendEvent.StartDate.ToString("yyyy-MM-dd")" DisableToolbar="true" Class="mx-2" />

                    <MudDatePicker Label="End date" TextChanged="@((string s) => UpdateEndDate(s))" Text="@sendEvent.EndDate.ToString("yyyy-MM-dd")" DisableToolbar="true" Class="mx-2" />

                    <MudTextField Label="Organizer" @bind-Value="sendEvent.Organizer" For="@(() => sendEvent.Organizer)" Variant="Variant.Outlined" />

                    <MudTextField Label="Leader" @bind-Value="sendEvent.Leader" For="@(() => sendEvent.Leader)" Variant="Variant.Outlined" />

                    <MudSelect @bind-Value="sendEvent.EventType" Label="Event type" Variant="Variant.Outlined">
                        @foreach (var type in GetTypes())
                            {
                            <MudSelectItem Value="@type" />
                            }
                    </MudSelect>

                    <MudSelect @bind-Value="sendEvent.AccommodationOption" Label="Accommodation Option" Variant="Variant.Outlined">
                        @foreach (var type in GetOptions())
                            {
                            <MudSelectItem Value="@type" />
                            }
                    </MudSelect>

                    <MudSelect @bind-Value="sendEvent.TransportOption" Label="Transport Option" Variant="Variant.Outlined">
                        @foreach (var type in GetOptions())
                            {
                            <MudSelectItem Value="@type" />
                            }
                    </MudSelect>

                    <MudSelect @bind-Value="sendEvent.EventState" Label="Event state" Variant="Variant.Outlined">
                        @foreach (var state in GetStates())
                            {
                            <MudSelectItem Value="@state" />
                            }
                    </MudSelect>

                    <MudCard Class="mt-1">
                        <MudCardContent>
                            @foreach (var c in sendEvent.ClassOptions)
                            {
                                <MudChip Color="Color.Default" OnClose="(() => RemoveClass(c))">@c.Name</MudChip>
                            }

                            <MudTextField Label="Class options" @bind-Value="currentOption" Variant="Variant.Outlined" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" OnClick="AddClass">Class</MudButton>
                        </MudCardActions>
                        <ValidationMessage For="@(() => sendEvent.ClassOptions)" class="validation-message" />
                    </MudCard>

                    <MudTextField Label="Link" @bind-Value="sendEvent.Link" For="@(() => sendEvent.Link)" Variant="Variant.Outlined" />

                    <MudTextField Label="Note" @bind-Value="sendEvent.Note" For="@(() => sendEvent.Note)" Variant="Variant.Outlined" />

                    <MudCard Class="mt-1">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">Deadlines:</MudText>
                            @foreach (var d in sendEvent.Deadlines)
                            {
                                <MudCard Outlined="true">
                                    <MudCardContent>
                                        <MudDatePicker Label="Deadline" TextChanged="@((string s) => UpdateDeadline(s, d))" Text="@d.Deadline.ToString("yyyy-MM-dd")" DisableToolbar="true" Class="mx-2" />
                                        @if (sendEvent.Deadlines.Count > 1)
                                        {
                                            <MudIconButton Icon="@Icons.Filled.Delete" Size="Size.Medium" Color="Color.Error" OnClick="(() => RemoveDeadline(d))"></MudIconButton>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            }
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" OnClick="AddDeadline">Deadline</MudButton>
                        </MudCardActions>
                    </MudCard>

                    <MudCard Class="mt-1">
                        <MudCardContent>
                            <MudText Typo="Typo.h6"><b>Event Stages:</b></MudText>
                            @foreach (var s in sendEvent.EventStages)
                            {
                                <MudCard>
                                    <MudCardContent>
                                        <MudGrid>
                                            <MudItem xs="6">
                                                <MudTextField Label="Stage name" @bind-Value="s.Name" For="@(() => s.Name)" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudDatePicker Label="Stage date" TextChanged="@((string st) => UpdateStageDate(st, s))" Text="@s.Date.ToString("yyyy-MM-dd")" DisableToolbar="true" Class="mx-2" />

                                            <MudIconButton Icon="@Icons.Filled.Delete" Size="Size.Medium" Color="Color.Error" OnClick="(() => RemoveStage(s))"></MudIconButton>
                                        </MudGrid>
                                    </MudCardContent>
                                </MudCard>
                            }

                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" OnClick="AddStage">Stage</MudButton>
                        </MudCardActions>
                    </MudCard>

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Filled.Close" OnClick="Navigate" Class="ml-3">Cancel</MudButton>
                    @if (eventId == null)
                    {
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    }
                    else
                    {
                        <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary" OnClick="RemoveEvent" Class="ml-auto">Remove</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-2">Save</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</MudContainer>

@code {
    [Parameter]
    public int? eventId { get; set; }
    private EventEditDTO sendEvent;
    private string currentOption;

    protected override async Task OnInitializedAsync()
    {
        if (eventId == null)
        {
            sendEvent = new EventEditDTO();
            sendEvent.StartDate = DateTime.Today;
            sendEvent.EndDate = DateTime.Today;
            sendEvent.EventType = GetTypes()[0];
            sendEvent.EventState = GetStates()[0];
            sendEvent.TransportOption = GetOptions()[0];
            sendEvent.AccommodationOption = GetOptions()[0];
            sendEvent.ClassOptions = new HashSet<EventClassOption>();
            sendEvent.Deadlines = new List<EventDeadline>();
            AddDeadline();
            sendEvent.EventStages = new HashSet<EventStageDTO>();
        }
        else
        {
            sendEvent = await Http.GetFromJsonAsync<EventEditDTO>($"Events/{eventId}");
        }

    }

    private void UpdateStartDate(string date)
    {
        sendEvent.StartDate = DateTime.Parse(date);
        sendEvent.EndDate = DateTime.Parse(date);
    }

    private void UpdateEndDate(string date)
    {
        sendEvent.EndDate = DateTime.Parse(date);
    }

    private static EventType[] GetTypes()
    {
        return (EventType[])Enum.GetValues(typeof(EventType));
    }

    private static ClubEventOption[] GetOptions()
    {
        return (ClubEventOption[])Enum.GetValues(typeof(ClubEventOption));
    }

    private static EventState[] GetStates()
    {
        return (EventState[])Enum.GetValues(typeof(EventState));
    }

    private void AddClass()
    {
        if (string.IsNullOrWhiteSpace(currentOption)) return;
        var newClass = new EventClassOption();
        newClass.Name = currentOption;
        currentOption = "";
        sendEvent.ClassOptions.Add(newClass);
        StateHasChanged();
    }

    private void RemoveClass(EventClassOption c)
    {
        sendEvent.ClassOptions.Remove(c);
        StateHasChanged();
    }

    private void AddDeadline()
    {
        var newDeadline = new EventDeadline();
        newDeadline.Deadline = DateTime.Today;
        sendEvent.Deadlines.Add(newDeadline);
    }

    private void UpdateDeadline(string date, EventDeadline d)
    {
        d.Deadline = DateTime.Parse(date);
    }

    private void RemoveDeadline(EventDeadline d)
    {
        sendEvent.Deadlines.Remove(d);
    }

    private void AddStage()
    {
        var newStage = new EventStageDTO();
        newStage.Date = DateTime.Today;
        sendEvent.EventStages.Add(newStage);
    }

    private void UpdateStageDate(string date, EventStageDTO s)
    {
        s.Date = DateTime.Parse(date);
    }

    private void RemoveStage(EventStageDTO s)
    {
        sendEvent.EventStages.Remove(s);
    }

    private async void OnValidSubmit(EditContext context)
    {
        if (eventId == null)
        {
            await Http.PostAsJsonAsync<EventEditDTO>("Events", sendEvent);
        }
        else
        {
            await Http.PutAsJsonAsync<EventEditDTO>("Events", sendEvent);
        }
        NavigationManager.NavigateTo($"/admin/events");
    }


    private async void RemoveEvent()
    {
        await Http.DeleteAsync($"Events/{eventId}");
        NavigationManager.NavigateTo($"/admin/events");
    }

    private void Navigate()
    {
        NavigationManager.NavigateTo($"/admin/events");
    }
}