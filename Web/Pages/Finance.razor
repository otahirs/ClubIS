@page "/finance"
@attribute [Authorize]
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider authState

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Finance</MudText>

    @if (currentStatement == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudSelect T="FinanceStatementDTO" Label="Accounts" Variant="Variant.Outlined" ToStringFunc="((s) => s.Name)" @bind-Value="currentStatement">
            @foreach (var statement in financeStatements)
            {
                <MudSelectItem T="FinanceStatementDTO" Value="statement" />
            }
        </MudSelect>
        <FinanceStatement Statement="currentStatement" />
        <br />
        <MudGrid>
            <MudItem md="6" xs="12">
                 <FinanceUserCreditTransfer SourceUserName="@currentStatement.Name" SourceUserId="@currentStatement.UserId" OnAfterSubmit="ReloadStatements" />
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {

    private List<FinanceStatementDTO> financeStatements;
    private FinanceStatementDTO currentStatement;

    protected override async Task OnInitializedAsync()
    {
        await ReloadStatements();
    }

    private async Task ReloadStatements()
    {
        int userId = await authState.GetUserId();
        financeStatements = await Http.GetFromJsonAsync<List<FinanceStatementDTO>>($"Payments/statements/{userId}");
        currentStatement = financeStatements.First();
    }
}