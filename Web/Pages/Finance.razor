@page "/finance"
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider AuthState

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Finance</MudText>

    @if (_currentStatement == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        @if (_financeStatements.Count > 1)
        {
            <MudSelect T="FinanceStatementDTO" Label="Managed Accounts" Variant="Variant.Outlined" ToStringFunc="s => s.Name" @bind-Value="_currentStatement">
                @foreach (var statement in _financeStatements)
                {
                    <MudSelectItem T="FinanceStatementDTO" Value="statement" />
                }
            </MudSelect>
        }
        <FinanceStatement Statement="_currentStatement" />
        <br />
        <MudGrid>
            <MudItem md="6" xs="12">
                <FinanceUserCreditTransfer SourceUserName="@_currentStatement.Name" SourceUserId="@_currentStatement.UserId" OnAfterSubmit="ReloadStatements" />
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {

    private List<FinanceStatementDTO> _financeStatements;
    private FinanceStatementDTO _currentStatement;

    protected override async Task OnInitializedAsync()
    {
        await ReloadStatements();
    }

    private async Task ReloadStatements()
    {
        var userId = await AuthState.GetUserId();
        _financeStatements = await Http.GetFromJsonAsync<List<FinanceStatementDTO>>($"Payments/statements/{userId}");
        _currentStatement = _financeStatements.First();
    }

}