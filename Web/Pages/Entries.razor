@page "/events"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Event entries</MudText>
    @if (_events == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <MudExpansionPanels>
            @foreach (var ev in _events)
            {
                <MudExpansionPanel IsExpandedChanged="() => ev.Load = true">
                    <TitleContent>
                        <MudGrid Class="align-center">
                            <MudItem xs="2">
                                @if (ev.EventWithEntry.Event.StartDate.Equals(ev.EventWithEntry.Event.EndDate))
                                {
                                    @ev.EventWithEntry.Event.StartDate.ToString("ddd d.M.")
                                    <br/>
                                }
                                else
                                {
                                    @ev.EventWithEntry.Event.StartDate.ToString("ddd d.M.")
                                    <br/>
                                    @ev.EventWithEntry.Event.EndDate.ToString("- ddd d.M.")
                                }
                            </MudItem>
                            <MudItem xs="5">
                                <MudText>@ev.EventWithEntry.Event.Name</MudText>
                            </MudItem>
                            <MudItem xs="3">
                                <MudText>@GetDeadlines(ev.EventWithEntry.Event.Deadlines)</MudText>
                            </MudItem>
                            <MudItem xs="2">
                                @if (ev.EventWithEntry.EntryInfo.Class == null)
                                {
                                    <MudChip Size="Size.Small" Label="true">not registered</MudChip>
                                }
                                else
                                {
                                    <MudChip Size="Size.Small" Label="true" Color="Color.Primary">@ev.EventWithEntry.EntryInfo.Class</MudChip>
                                }
                            </MudItem>
                        </MudGrid>
                    </TitleContent>
                    <ChildContent>
                        <MudDivider/>
                        @if (ev.Load)
                        {
                            <EventPreview EventId="ev.EventWithEntry.Event.Id" EnteredClassChanged="c => ev.EventWithEntry.EntryInfo.Class = c"/>
                        }
                    </ChildContent>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    }
</MudContainer>

@code {

    class EventList
    {
        public bool Load { get; set; } = false;
        public EventListWithUserEntryDTO EventWithEntry { get; set; }
    }
    private List<EventList> _events;
    private readonly List<string> _types = Enum.GetNames(typeof(EventType)).Prepend("All").ToList();
    private string _searchType = "All";
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        _events = (await Http.GetFromJsonAsync<List<EventListWithUserEntryDTO>>("Events/user/"))
            .Where(e => e.Event.EventState != EventState.Archived)
            .Select(e => 
                new EventList
                {
                    Load = false, 
                    EventWithEntry = 
                        new EventListWithUserEntryDTO
                        {
                            Event = e.Event, 
                            EntryInfo = e.EntryInfo ?? new EventEntryBasicInfoDTO()
                        }
                })
            .ToList();
    }

    bool FilterFunc(EventListWithUserEntryDTO e)
    {
        var eventData = $"{GetDate(e.Event.StartDate, e.Event.EndDate)} {e.Event.Name} {e.Event.Place} {e.Event.EventType} {GetDeadlines(e.Event.Deadlines)} {e.EntryInfo.Class}";
        var eventType = e.Event.EventType.ToString();
        return (_searchType == "All" || eventType.Contains(_searchType)) && Searching.FilterFunc(eventData, _searchString);
    }

    private static string GetDate(DateTime start, DateTime end)
    {
        return start.Equals(end) ? end.ToString("dd.MM.yyyy") : start.ToString("dd.") + "\n -" + end.ToString("dd.MM.yyyy");
    }

    private static string GetDeadlines(ICollection<EventDeadline> deadlines)
    {
        return deadlines.Count != 0 ? deadlines.Select(d => d.Deadline.ToString("d.M.yyyy")).Aggregate((a, b) => a + ", " + b) : "";
    }

    private void Navigate(TableRowClickEventArgs<EventListWithUserEntryDTO> obj)
    {
        NavigationManager.NavigateTo($"event/{obj.Item.Event.Id}");
    }
}