@page "/events"
@attribute [Authorize]
@using MudBlazor.Components.Table
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Event entries</MudText>
    @if (Events == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
<MudTable Items="@Events" Filter="new Func<EventListWithUserEntryDTO, bool>(FilterFunc)" OnRowClick="@(e=>Navigate(e))" T="EventListWithUserEntryDTO" Hover="true" Dense="true">
    <ToolBarContent>
        <MudTextField @bind-Value="SearchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudToolBarSpacer />
        <MudSelect T="string" @bind-Value="SearchType" Label="Filter EventType">
            @foreach (var type in Types)
            {
                <MudSelectItem Value="@type" />
            }
        </MudSelect>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Place</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Deadlines</MudTh>
        <MudTh>Entries</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Date">@GetDate(context.Event.StartDate, context.Event.EndDate)</MudTd>
        <MudTd DataLabel="Name">@context.Event.Name</MudTd>
        <MudTd DataLabel="Place">@context.Event.Place</MudTd>
        <MudTd DataLabel="Type">@context.Event.EventType</MudTd>
        <MudTd DataLabel="Deadlines">@GetDeadlines(context.Event.Deadlines)</MudTd>
        <MudTd DataLabel="Entries">
            @if (context.EntryInfo == null)
            {
                <MudChip Size="Size.Small" Label="true">@GetClass(context.EntryInfo)</MudChip>
            }
            else
            {
                <MudChip Size="Size.Small" Label="true" Color="Color.Primary">@GetClass(context.EntryInfo)</MudChip>
            }
        </MudTd>
    </RowTemplate>
</MudTable>
    }
</MudContainer>

@code {
    private EventListWithUserEntryDTO[] Events;
    private List<string> Types;
    private string SearchString = "";
    private string SearchType = "";

    protected override async Task OnInitializedAsync()
    {
        Events = (await Http.GetFromJsonAsync<EventListWithUserEntryDTO[]>($"Events/user/"))
            .Where(e => e.Event.EventState != EventState.Archived).ToArray();
        Types = ((EventType[])Enum.GetValues(typeof(EventType))).Select(t => t.ToString()).ToList();
        Types.Insert(0, "");
    }

    bool FilterFunc(EventListWithUserEntryDTO e)
    {
        if (SearchString == null) SearchString = "";
        var eventData = $"{GetDate(e.Event.StartDate, e.Event.EndDate)} {e.Event.Name} {e.Event.Place} {e.Event.EventType} {GetDeadlines(e.Event.Deadlines)} {GetClass(e.EntryInfo)}";
        var eventType = e.Event.EventType.ToString();

        return eventType.Contains(SearchType) && eventData.Contains(SearchString, StringComparison.InvariantCultureIgnoreCase);
    }

    private static string GetDate(DateTime start, DateTime end)
    {
        return (start.Equals(end)) ? end.ToString("dd.MM.yyyy") : start.ToString("dd.") + '-' + end.ToString("dd.MM.yyyy");
    }

    private static string GetDeadlines(ICollection<EventDeadline> deadlines)
    {
        return (deadlines.Count != 0) ? deadlines.Select(d => d.Deadline.ToString("dd.MM.yyyy")).Aggregate((a, b) => a + ", " + b) : "";
    }

    private static string GetClass(EventEntryBasicInfoDTO entryInfo)
    {
        return (entryInfo == null) ? "not registered" : entryInfo.Class;
    }

    private void Navigate(TableRowClickEventArgs<EventListWithUserEntryDTO> obj)
    {
        NavigationManager.NavigateTo($"event/{obj.Item.Event.Id}");
    }

}