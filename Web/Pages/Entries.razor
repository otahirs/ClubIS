@page "/events"
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Event entries</MudText>
    @if (events == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudPaper Class="d-flex justify-space-between" Elevation="0">
            <MudTextField Class="ma-4" @bind-Value="searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
            <MudSelect @bind-Value="searchType" Label="Filter EventType" Class=" ma-4">
                @foreach (var type in types)
                    {
                    <MudSelectItem Value="@type" />
                    }
            </MudSelect>
        </MudPaper>
        <MudTable Items="@events" Filter="new Func<EventListWithUserEntryDTO, bool>(FilterFunc)" OnRowClick="@(e=>Navigate(e))" T="EventListWithUserEntryDTO" Hover="true" Dense="true">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Place</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Deadlines</MudTh>
                <MudTh>Entries</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@GetDate(context.Event.StartDate, context.Event.EndDate)</MudTd>
                <MudTd DataLabel="Name">@context.Event.Name</MudTd>
                <MudTd DataLabel="Place">@context.Event.Place</MudTd>
                <MudTd DataLabel="Type">@context.Event.EventType</MudTd>
                <MudTd DataLabel="Deadlines">@GetDeadlines(context.Event.Deadlines)</MudTd>
                <MudTd DataLabel="Entries">
                    @if (context.EntryInfo == null)
                    {
                        <MudChip Size="Size.Small" Label="true">@GetClass(context.EntryInfo)</MudChip>
                    }
                    else
                    {
                        <MudChip Size="Size.Small" Label="true" Color="Color.Primary">@GetClass(context.EntryInfo)</MudChip>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private EventListWithUserEntryDTO[] events;
    private List<string> types;
    private string searchString = "";
    private string searchType = "";

    protected override async Task OnInitializedAsync()
    {
        events = (await Http.GetFromJsonAsync<EventListWithUserEntryDTO[]>($"Events/user/"))
            .Where(e => e.Event.EventState != EventState.Archived).ToArray();
        types = ((EventType[])Enum.GetValues(typeof(EventType))).Select(t => t.ToString()).ToList();
        types.Insert(0, "");
    }

    bool FilterFunc(EventListWithUserEntryDTO e)
    {
        if (searchString == null) searchString = "";
        var eventData = $"{GetDate(e.Event.StartDate, e.Event.EndDate)} {e.Event.Name} {e.Event.Place} {e.Event.EventType} {GetDeadlines(e.Event.Deadlines)} {GetClass(e.EntryInfo)}";
        var eventType = e.Event.EventType.ToString();

        return eventType.Contains(searchType) && eventData.Contains(searchString, StringComparison.InvariantCultureIgnoreCase);
    }

    private static string GetDate(DateTime start, DateTime end)
    {
        return (start.Equals(end)) ? end.ToString("dd.MM.yyyy") : start.ToString("dd.") + '-' + end.ToString("dd.MM.yyyy");
    }

    private static string GetDeadlines(ICollection<EventDeadline> deadlines)
    {
        return (deadlines.Count != 0) ? deadlines.Select(d => d.Deadline.ToString("dd.MM.yyyy")).Aggregate((a, b) => a + ", " + b) : "";
    }

    private static string GetClass(EventEntryBasicInfoDTO entryInfo)
    {
        return (entryInfo == null) ? "not registered" : entryInfo.Class;
    }

    private void Navigate(TableRowClickEventArgs<EventListWithUserEntryDTO> obj)
    {
        NavigationManager.NavigateTo($"event/{obj.Item.Event.Id}");
    }

}