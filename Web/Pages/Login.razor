@page "/login"
@page "/login/{returnUrl}"
@layout LoginLayout
@inject NavigationManager NavigationManager
@inject IdentityAuthenticationStateProvider AuthStateProvider

<EditForm Model="@LoginParameters" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudCard Style="margin-top: 72px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Login</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Username"
                          @bind-Value="LoginParameters.UserName" For="@(() => LoginParameters.UserName)"/>
            <MudTextField Label="Password" Class="mt-3"
                          @bind-Value="LoginParameters.Password" For="@(() => LoginParameters.Password)" InputType="InputType.Password"/>
            <MudCheckBox Label="Remember me" T="bool" @bind-Value="@LoginParameters.RememberMe"/>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Sign in</MudButton>
        </MudCardActions>
    </MudCard>


    @if (!string.IsNullOrEmpty(Error))
    {
        <MudText Typo="Typo.body2" Align="Align.Center" Class="my-4">
            @Error
        </MudText>
    }
</EditForm>

@code{

    [Parameter]
    public string ReturnUrl { get; set; }

    LoginParametersDTO LoginParameters { get; } = new();
    string Error { get; set; }

    async Task OnValidSubmit()
    {
        Error = null;
        try
        {
            await AuthStateProvider.Login(LoginParameters);
            NavigationManager.NavigateTo(string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

}