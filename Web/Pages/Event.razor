@page "/event/{eventId:int}"
@inject HttpClient Http
@using System.Text.Json
@attribute [Authorize]
@inject IdentityAuthenticationStateProvider authState
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    @if (e == null || displayedEntries == null || users == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="@(()=>NavigationManager.NavigateTo("/events"))" Class="ml-3">back to events</MudButton>
        <EventHeader Event="e" />
        @if (e.EventState != EventState.Canceled && !IsAfterDeadlines())
        {
             <EditForm Model="@sendEntry" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="6">
                                <MudSelect Label="User" Required="true" ValueChanged="@((int s) => UpdateData(s))" Value="@sendEntry.UserId" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@users.User.Id">@users.User.Name</MudSelectItem>
                                    @foreach (var user in users.Supervised)
                                    {
                                        <MudSelectItem Value="@user.Id">@user.Name</MudSelectItem>
                                    }
                                </MudSelect>

                                <MudSelect Label="Class" Required="true" @bind-Value="@sendEntry.Class" Variant="Variant.Outlined">
                                    @foreach (var c in e.ClassOptions)
                                                {
                                        <MudSelectItem Value="@c.Name">@c.Name</MudSelectItem>
                                                }
                                </MudSelect>
                                @if (e.TransportOption == ClubEventOption.Optional)
                                {
                                    <MudCheckBox T="bool" @bind-Checked="@sendEntry.HasClubTransport" Label="Transport" />
                                }

                                @if (e.AccommodationOption == ClubEventOption.Optional)
                                {
                                    <MudCheckBox T="bool" @bind-Checked="@sendEntry.HasClubAccommodation" Label="Accommodation" />
                                }

                                <MudSelect T="string" Label="SI card number" @bind-Value="@siCard" Variant="Variant.Outlined">
                                    @foreach (var card in GetSiCards(sendEntry.UserId))
                                    {
                                        <MudSelectItem Value="@card.Number.ToString()">@card.Number.ToString()</MudSelectItem>
                                    }
                                    <MudSelectItem Value="@custom">@custom</MudSelectItem>
                                </MudSelect>
                                @if (siCard.Equals(custom))
                                {
                                    <MudTextField Label="Custom SI card number" @bind-Value="sendEntry.SiCardNumber" For="@(() => sendEntry.SiCardNumber)" Variant="Variant.Outlined" />
                                }

                                <MudTextField Label="Note(intern)" @bind-Value="sendEntry.NoteForClub" For="@(() => sendEntry.NoteForClub)" Variant="Variant.Outlined" />

                                <MudTextField Label="Note(organizer)" @bind-Value="sendEntry.NoteForOrganisator" For="@(() => sendEntry.NoteForOrganisator)" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem md="6">
                                @if (e.EventStages.Count != 0)
                                {
                                    <MudCard Class="mt-1">
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6"><b>Event Stages:</b></MudText>
                                            @foreach (var s in e.EventStages)
                                            {
                                        <MudCheckBox @bind-Checked="s.Selected">
                                            @s.Date.ToString("dd.MM.yyyy"), <b>@s.Name</b>
                                        </MudCheckBox>
                                                <br>
                                            }
                                        </MudCardContent>
                                    </MudCard>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudGrid>
                            <MudItem md="6">
                                @if (sendEntry.Id == 0 || sendEntry.Status == EntryStatus.Removed)
                                {
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                                }
                                else
                                {

                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" OnClick="RemoveEntry" Class="mx-2">Remove</MudButton>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        }
        <MudDivider Class="mt-4 mb-4"/>
        <MudText Typo="Typo.h5" GutterBottom="true">Entries</MudText>
        <MudTable Items="@displayedEntries" Dense="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Class</MudTh>
                <MudTh>ComTram</MudTh>
                <MudTh>ComAcco</MudTh>
                <MudTh>SiNum</MudTh>
                <MudTh>Note(i)</MudTh>
                <MudTh>Note(org)</MudTh>
                <MudTh>Stages</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Class">@context.Class</MudTd>
                <MudTd DataLabel="ComTran">
                    @if (context.HasClubTransport)
                        {
                        <MudIcon Icon="@Icons.Material.Filled.Check" />
                        }
                        else
                        {
                        <MudIcon Icon="@Icons.Material.Filled.Close" />
                        }
                </MudTd>
                <MudTd DataLabel="ComAcco">
                    @if (context.HasClubAccommodation)
                        {
                        <MudIcon Icon="@Icons.Material.Filled.Check" />
                        }
                        else
                        {
                        <MudIcon Icon="@Icons.Material.Filled.Close" />
                        }
                </MudTd>
                <MudTd DataLabel="SiNum">@context.SiCardNumber</MudTd>
                <MudTd DataLabel="Note(i)">@context.NoteForClub</MudTd>
                <MudTd DataLabel="Note(org)">@context.NoteForOrganisator</MudTd>
                <MudTd DataLabel="Stages">@GetStages(context.EnteredStages)</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    [Parameter]
    public int eventId { get; set; }
    private int userId;
    private string custom { get; set; } = "Custom";
    private string siCard { get; set; }

    private EventDTO e;
    private UserEntryListDTO users;
    private List<EventEntryDTO> displayedEntries;
    private List<EventEntryDTO> allEntries;
    private EventEntryDTO sendEntry = new EventEntryDTO();

    protected override async Task OnInitializedAsync()
    {
        userId = await authState.GetUserId();
        e = await Http.GetFromJsonAsync<EventDTO>($"Events/{eventId}");
        users = await Http.GetFromJsonAsync<UserEntryListDTO>($"Users/entriesSupervisor/{userId}");
        await LoadEntries();
        NewEntry(userId);
        UpdateData(userId);
    }

    private void NewEntry(int id)
    {
        sendEntry = new EventEntryDTO();
        sendEntry.UserId = id;
        sendEntry.EventId = eventId;
        sendEntry.HasClubAccommodation = e.AccommodationOption == ClubEventOption.ClubEnsured;
        sendEntry.HasClubTransport = e.TransportOption == ClubEventOption.ClubEnsured;
        sendEntry.Status = EntryStatus.NotSent;
        sendEntry.Class = e.ClassOptions.ElementAt(0).Name;
        sendEntry.EnteredStages = new HashSet<EventStageDTO>();
        e.EventStages.ToList().ForEach(s => s.Selected = false);
        siCard = (GetSiCards(id).Count > 0) ? (GetSiCards(id).FirstOrDefault(s => s.IsDefault)).Number.ToString() : custom;
    }

    private void UpdateData(int id)
    {
        sendEntry = allEntries.FirstOrDefault(e => e.UserId == id);
        if (sendEntry == null)
        {
            NewEntry(id);
        }
        else
        {
            siCard = sendEntry.SiCardNumber.ToString();
            foreach (var stage in e.EventStages)
            {
                stage.Selected = sendEntry.EnteredStages.Any(s => s.Id == stage.Id);
            }
        }
    }

    private ISet<SiCardDTO> GetSiCards(int id)
    {
        return users.User.Id == id ? users.User.SiCardNumbers : (users.Supervised.FirstOrDefault(c => c.Id == id))?.SiCardNumbers;
    }

    private async Task OnValidSubmit()
    {
        sendEntry.EnteredStages.Clear();
        @foreach (var stage in e.EventStages)
        {
            if (stage.Selected)
            {
                sendEntry.EnteredStages.Add(
                    new EventStageDTO() { Id = stage.Id }
                );
            }
        }
        SetSiCard();
        if (sendEntry.Id == 0)
        {
            // add new
            await Http.PostAsJsonAsync<EventEntryDTO>("Entries", sendEntry);
        }
        else
        {
            // edit
            sendEntry.Status = EntryStatus.Changed;
            await Http.PutAsJsonAsync<EventEntryDTO>("Entries", sendEntry);
        }
        await LoadEntries();
        UpdateData(sendEntry.UserId);
        StateHasChanged();
    }

    private void SetSiCard()
    {
        if (!(siCard.Equals(custom)))
        {
            sendEntry.SiCardNumber = Convert.ToInt32(siCard);
        }
    }

    private async void RemoveEntry()
    {
        if (sendEntry.Status == EntryStatus.NotSent)
        {
            await Http.DeleteAsync($"Entries/{sendEntry.Id}");
        }
        else
        {
            sendEntry.Status = EntryStatus.Removed;
            await Http.PutAsJsonAsync<EventEntryDTO>("Entries", sendEntry);
        }
        await LoadEntries();
        UpdateData(sendEntry.UserId);
        StateHasChanged();
    }

    private async Task LoadEntries()
    {
        allEntries = await Http.GetFromJsonAsync<List<EventEntryDTO>>($"Entries/event/{eventId}");
        displayedEntries = allEntries.Where(e => e.Status != EntryStatus.Removed).ToList();
        // ugly way to create a deep copy
        displayedEntries = JsonSerializer.Deserialize<List<EventEntryDTO>>(JsonSerializer.Serialize(displayedEntries));
    }

    private string GetStages(ISet<EventStageDTO> enteredStages)
    {
        return (enteredStages.Count != 0) ? enteredStages.Select(s => s.Name).Aggregate((a, b) => a + ", " + b) : "";
    }

    private bool IsAfterDeadlines()
    {
        var maxDate = e.Deadlines.Select(x => x.Deadline).Max();
        return DateTime.Compare(DateTime.Today, maxDate) >= 0;
    }
}
