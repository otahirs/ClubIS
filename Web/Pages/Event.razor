@page "/event/{eventId:int}"
@inject HttpClient Http
@attribute [Authorize]
@inject IdentityAuthenticationStateProvider authState
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    @if (E == null || Entries == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudButton StartIcon="@Filled.ArrowBack" OnClick="@(()=>NavigationManager.NavigateTo("/events"))" Class="ml-3">back to events</MudButton>
        <MudExpansionPanel>
            <TitleContent>
                @if (E.EventState != EventState.Canceled)
                {
                    <MudText Typo="Typo.h3">@E.Name</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h3" Color="Color.Error">
                        @E.Name - Calceled
                    </MudText>
                }
            </TitleContent>
            <ChildContent>
                <MudText><b>Place:</b> @E.Place</MudText>
                <MudText><b>Organizer:</b> @E.Organizer</MudText>
                <MudText><b>Leader:</b> @E.Leader</MudText>
                <MudText><b>Start date:</b> @E.StartDate.ToString("dd.MM.yyyy")</MudText>
                <MudText><b>End date:</b> @E.EndDate.ToString("dd.MM.yyyy")</MudText>
                <MudText><b>Event type:</b> @E.EventType</MudText>
                <MudText><b>Link:</b> <MudLink Href="@GetLink()">@E.Link</MudLink></MudText>
                <MudText><b>Deadlines:</b> @GetDeadlines()</MudText>
                <MudText><b>Class options:</b> @GetClassOptions()</MudText>
                <MudText><b>Event state:</b> @E.EventState</MudText>
                <MudText><b>Event properties:</b> @E.EventProperties</MudText>
                <MudText><b>Event stages:</b> @GetStages()</MudText>
                <MudText><b>Note:</b> @E.Note</MudText>
            </ChildContent>
        </MudExpansionPanel>
        @if (Users == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            @if (E.EventState != EventState.Canceled && !IsAfterDeadlines())
            {
                    <EditForm Model="@SendEntry" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <MudCard Elevation="0">
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem md="6">
                                        <MudSelect Label="User" Required="true" ValueChanged="@((int s) => UpdateData(s))" Value="@SendEntry.UserId" Variant="Variant.Outlined">
                                            <MudSelectItem Value="@Users.User.Id">@Users.User.Name</MudSelectItem>
                                            @foreach (var user in Users.Supervised)
                                            {
                                                <MudSelectItem Value="@user.Id">@user.Name</MudSelectItem>
                                            }
                                        </MudSelect>

                                        <MudSelect Label="Class" Required="true" @bind-Value="@SendEntry.Class" Variant="Variant.Outlined">
                                            @foreach (var c in E.ClassOptions)
                                                        {
                                                <MudSelectItem Value="@c.Name">@c.Name</MudSelectItem>
                                                        }
                                        </MudSelect>
                                        @if (E.TransportOption == ClubEventOption.Optional)
                                        {
                                            <MudCheckBox T="bool" @bind-Checked="@SendEntry.HasClubTransport" Label="Transport" />
                                        }

                                        @if (E.AccommodationOption == ClubEventOption.Optional)
                                        {
                                            <MudCheckBox T="bool" @bind-Checked="@SendEntry.HasClubAccommodation" Label="Accommodation" />
                                        }

                                        <MudSelect T="string" Label="SI card number" @bind-Value="@siCard" Variant="Variant.Outlined">
                                            @foreach (var card in GetSiCards(SendEntry.UserId))
                                            {
                                                <MudSelectItem Value="@card.Number.ToString()">@card.Number.ToString()</MudSelectItem>
                                            }
                                            <MudSelectItem Value="@custom">@custom</MudSelectItem>
                                        </MudSelect>
                                        @if (siCard.Equals(custom))
                                        {
                                            <MudTextField Label="Custom SI card number" @bind-Value="SendEntry.SiCardNumber" For="@(() => SendEntry.SiCardNumber)" Variant="Variant.Outlined" />
                                        }

                                        <MudTextField Label="Note(intern)" @bind-Value="SendEntry.NoteForClub" For="@(() => SendEntry.NoteForClub)" Variant="Variant.Outlined" />

                                        <MudTextField Label="Note(organizer)" @bind-Value="SendEntry.NoteForOrganisator" For="@(() => SendEntry.NoteForOrganisator)" Variant="Variant.Outlined" />
                                    </MudItem>
                                    <MudItem md="6">
                                        @if (E.EventStages.Count != 0)
                                        {
                                            <MudCard Class="mt-1">
                                                <MudCardContent>
                                                    <MudText Typo="Typo.h6"><b>Event Stages:</b></MudText>
                                                    @foreach (var s in E.EventStages)
                                                    {
                                                        <MudCheckBox @bind-Checked="s.Selected">
                                                            <b>@s.Name</b>, date: @s.Date.ToString("dd.MM.yyyy")
                                                        </MudCheckBox>
                                                    }
                                                </MudCardContent>
                                            </MudCard>
                                        }
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions>
                                <MudGrid>
                                    <MudItem md="6">
                                    @if (CurrentEntry == null)
                                    {
                                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                                    }
                                    else
                                    {
                                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Filled.Delete" OnClick="RemoveEntry" Class="ml-auto">Remove</MudButton>
                                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-2">Save</MudButton>
                                    }
                                    </MudItem>
                                </MudGrid>
                            </MudCardActions>
                        </MudCard>
                    </EditForm>
               
            }
        }
        <MudDivider Class="mt-4 mb-4"/>
        <MudText Typo="Typo.h5" GutterBottom="true">Entries</MudText>
        <MudTable Items="@Entries" Dense="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Class</MudTh>
                <MudTh>ComTram</MudTh>
                <MudTh>ComAcco</MudTh>
                <MudTh>SiNum</MudTh>
                <MudTh>Note(i)</MudTh>
                <MudTh>Note(org)</MudTh>
                <MudTh>Stages</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Class">@context.Class</MudTd>
                <MudTd DataLabel="ComTran">
                    @if (context.HasClubTransport)
                        {
                        <MudIcon Icon="@Filled.Check" />
                        }
                        else
                        {
                        <MudIcon Icon="@Filled.Close" />
                        }
                </MudTd>
                <MudTd DataLabel="ComAcco">
                    @if (context.HasClubAccommodation)
                        {
                        <MudIcon Icon="@Filled.Check" />
                        }
                        else
                        {
                        <MudIcon Icon="@Filled.Close" />
                        }
                </MudTd>
                <MudTd DataLabel="SiNum">@context.SiCardNumber</MudTd>
                <MudTd DataLabel="Note(i)">@context.NoteForClub</MudTd>
                <MudTd DataLabel="Note(org)">@context.NoteForOrganisator</MudTd>
                <MudTd DataLabel="Stages">@GetStages(context.EnteredStages)</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    [Parameter]
    public int EventId { get; set; }
    private int UserId;
    private string custom { get; set; } = "Custom";
    private string siCard { get; set; }

    private EventEditDTO E;
    private UserEntryListDTO Users;
    private List<EventEntryListDTO> Entries;
    private EventEntryListDTO CurrentEntry;
    private EventEntryEditDTO SendEntry = new EventEntryEditDTO();

    protected override async Task OnInitializedAsync()
    {
        UserId = await authState.GetUserId();
        E = await Http.GetFromJsonAsync<EventEditDTO>($"Events/{EventId}");
        Users = await Http.GetFromJsonAsync<UserEntryListDTO>($"Users/entriesSupervisor/{UserId}");
        Entries = await Http.GetFromJsonAsync<List<EventEntryListDTO>>($"Entries/event/{EventId}");
        UpdateData(UserId);
    }

    private void UpdateData(int id)
    {
        SendEntry.UserId = id;
        SendEntry.EventId = EventId;
        SendEntry.SiCardNumber = null;
        CurrentEntry = Entries.FirstOrDefault(e => e.UserId == id);
        if (CurrentEntry == null)
        {
            SendEntry.Class = E.ClassOptions.ElementAt(0).Name;
            SendEntry.HasClubAccommodation = E.AccommodationOption == ClubEventOption.ClubEnsured;
            SendEntry.HasClubTransport = E.TransportOption == ClubEventOption.ClubEnsured;
            siCard = (GetSiCards(id).Count > 0) ? (GetSiCards(id).FirstOrDefault(s => s.IsDefault)).Number.ToString() : custom;
            SendEntry.NoteForClub = "";
            SendEntry.NoteForOrganisator = "";
            SendEntry.EnteredStages = new HashSet<EventStageDTO>();

            E.EventStages.ToList().ForEach(s => s.Selected = false);
        }
        else
        {
            SendEntry.Class = CurrentEntry.Class;
            SendEntry.HasClubTransport = CurrentEntry.HasClubTransport;
            SendEntry.HasClubAccommodation = CurrentEntry.HasClubAccommodation;
            siCard = CurrentEntry.SiCardNumber.ToString();
            SendEntry.NoteForClub = CurrentEntry.NoteForClub;
            SendEntry.NoteForOrganisator = CurrentEntry.NoteForOrganisator;
            SendEntry.EnteredStages = CurrentEntry.EnteredStages;

            foreach (var stage in E.EventStages)
            {
                stage.Selected = CurrentEntry.EnteredStages.Any(s => s.Id == stage.Id);
            }
        }
    }

    private ISet<SiCardDTO> GetSiCards(int id)
    {
        return Users.User.Id == id ? Users.User.SiCardNumbers : (Users.Supervised.FirstOrDefault(c => c.Id == id))?.SiCardNumbers;
    }

    private void OnValidSubmit(EditContext context)
    {
        SendEntry.Id = 0;
        SendEntry.EnteredStages.Clear();
        @foreach (var stage in E.EventStages)
        {
            if (stage.Selected)
            {
                SendEntry.EnteredStages.Add(
                    new EventStageDTO() { Id = stage.Id }
                );
            }
        }
        if (CurrentEntry == null)
            AddEntry();
        else
            EditEntry();
    }

    private async void AddEntry()
    {
        SendEntry.Status = EntryStatus.NotSent;
        SetSiCard();
        await Http.PostAsJsonAsync<EventEntryEditDTO>("Entries", SendEntry);
        Entries = await Http.GetFromJsonAsync<List<EventEntryListDTO>>($"Entries/event/{EventId}");
        UpdateData(SendEntry.UserId);
        StateHasChanged();
    }

    private async void EditEntry()
    {
        SendEntry.Id = CurrentEntry.Id;
        SetSiCard();
        SendEntry.Status = EntryStatus.Changed;
        await Http.PutAsJsonAsync<EventEntryEditDTO>("Entries", SendEntry);
        Entries = await Http.GetFromJsonAsync<List<EventEntryListDTO>>($"Entries/event/{EventId}");
        StateHasChanged();
    }

    private void SetSiCard()
    {
        if (!(siCard.Equals(custom)))
        {
            SendEntry.SiCardNumber = Convert.ToInt32(siCard);
        }
    }

    private async void RemoveEntry()
    {
        await Http.DeleteAsync($"Entries/{CurrentEntry.Id}");
        Entries.RemoveAll(e => e.UserId == CurrentEntry.UserId);
        UpdateData(UserId);
        StateHasChanged();
    }

    private string GetStages(ISet<EventStageDTO> enteredStages)
    {
        return (enteredStages.Count != 0) ? enteredStages.Select(s => s.Name).Aggregate((a, b) => a + ", " + b) : "";
    }

    private string GetLink()
    {
        return "https://" + E.Link;
    }

    private string GetDeadlines()
    {
        return (E.Deadlines.Count != 0) ? E.Deadlines.Select(d => d.Deadline.ToString("dd.MM.yyyy")).Aggregate((a, b) => a + ", " + b) : "";
    }

    private bool IsAfterDeadlines()
    {
        var maxDate = E.Deadlines.Select(x => x.Deadline).Max();
        return DateTime.Compare(DateTime.Today, maxDate) >= 0;
    }

    private string GetClassOptions()
    {
        return E.ClassOptions.Select(a => a.Name).Aggregate((a, b) => a + ", " + b);
    }

    private string GetStages()
    {
        return (E.EventStages.Count != 0) ? E.EventStages.Select(s => s.Name).Aggregate((a, b) => a + ", " + b) : "";
    }
}
