// <auto-generated />
using System;
using ClubIS.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClubIS.DataAccessLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210211100336_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("StreetAndNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            City = "Brno",
                            PostalCode = "***REMOVED***",
                            StreetAndNumber = "***REMOVED***",
                            UserId = 2147483647
                        },
                        new
                        {
                            Id = 2147483646,
                            City = "***REMOVED***",
                            PostalCode = "***REMOVED***",
                            UserId = 2147483646
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccommodationOption")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Entries")
                        .HasColumnType("int");

                    b.Property<int>("EventProperties")
                        .HasColumnType("int");

                    b.Property<int>("EventState")
                        .HasColumnType("int");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("Leader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Organizer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Place")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransportOption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            AccommodationOption = 2,
                            EndDate = new DateTime(2021, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Entries = 0,
                            EventProperties = 16,
                            EventState = 0,
                            EventType = 2,
                            Link = "mcr2020.obopava.cz",
                            Name = "Soustředění Vysočina",
                            Organizer = "OB ZAM",
                            Place = "Sklené",
                            StartDate = new DateTime(2021, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransportOption = 1
                        },
                        new
                        {
                            Id = 2147483646,
                            AccommodationOption = 2,
                            EndDate = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Entries = 0,
                            EventProperties = 16,
                            EventState = 0,
                            EventType = 0,
                            Link = "mcr2020.obopava.cz",
                            Name = "9. JML  klasická trať",
                            Organizer = "OB ZAM",
                            Place = "Jilemnice",
                            StartDate = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransportOption = 1
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventClassOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventClassOption");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            EventId = 2147483647,
                            Name = "A"
                        },
                        new
                        {
                            Id = 2147483646,
                            EventId = 2147483647,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2147483645,
                            EventId = 2147483646,
                            Name = "A"
                        },
                        new
                        {
                            Id = 2147483644,
                            EventId = 2147483646,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2147483643,
                            EventId = 2147483646,
                            Name = "H20"
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventDeadline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDeadline");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            Deadline = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2147483647
                        },
                        new
                        {
                            Id = 2147483646,
                            Deadline = new DateTime(2021, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2147483646
                        },
                        new
                        {
                            Id = 2147483645,
                            Deadline = new DateTime(2021, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2147483646
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Class")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("HasClubAccommodation")
                        .HasColumnType("bit");

                    b.Property<bool>("HasClubTransport")
                        .HasColumnType("bit");

                    b.Property<string>("NoteForClub")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NoteForOrganisator")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SiCardNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventEntries");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            Class = "A",
                            EventId = 2147483647,
                            HasClubAccommodation = true,
                            HasClubTransport = true,
                            SiCardNumber = ***REMOVED***,
                            Status = 0,
                            UserId = 2147483646
                        },
                        new
                        {
                            Id = 2147483646,
                            Class = "H20",
                            EventId = 2147483646,
                            HasClubAccommodation = true,
                            HasClubTransport = true,
                            SiCardNumber = ***REMOVED***,
                            Status = 0,
                            UserId = 2147483647
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventStage");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.FinanceAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreditBalance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FinanceAccounts");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            CreditBalance = 0
                        },
                        new
                        {
                            Id = 2147483646,
                            CreditBalance = 0
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.MemberFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MemberFeeType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("MemberFees");

                    b.HasData(
                        new
                        {
                            Id = 2147483646,
                            Amount = 0,
                            Description = "Oddílem jsou placeny veškeré závody. Závodník platí pouze storna.",
                            MemberFeeType = 4,
                            Name = "All Inclusive"
                        },
                        new
                        {
                            Id = 2147483647,
                            Amount = 100,
                            Description = "Nikam nejezdím nebo málo  veškeré závody se strhávají z osobního vkladu.",
                            MemberFeeType = 1,
                            Name = "Základ"
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            Date = new DateTime(2020, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "1111111111111111111111111111111111111111111111111111111111111111111111111111111",
                            Title = "test nadpisu",
                            UserId = 2147483647
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreditAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PaymentState")
                        .HasColumnType("int");

                    b.Property<int?>("RecipientAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceAccountId")
                        .HasColumnType("int");

                    b.Property<string>("StornoNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("RecipientAccountId");

                    b.HasIndex("SourceAccountId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            CreditAmount = 1000,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2147483647,
                            ExecutorId = 2147483647,
                            PaymentState = 0,
                            RecipientAccountId = 2147483646,
                            SourceAccountId = 2147483647
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.SiCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SiCard");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            IsDefault = true,
                            Number = ***REMOVED***,
                            UserId = 2147483647
                        },
                        new
                        {
                            Id = 2147483646,
                            IsDefault = true,
                            Number = ***REMOVED***,
                            UserId = 2147483646
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AccountState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FinanceSupervisorId")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Licence")
                        .HasColumnType("int");

                    b.Property<int?>("MemberFeeId")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("FinanceSupervisorId");

                    b.HasIndex("MemberFeeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            AccountId = 2147483647,
                            AccountState = 3,
                            Email = "tst2@eof.cz",
                            Firstname = "Matěj",
                            Gender = 0,
                            Licence = 0,
                            Nationality = "Česká republika",
                            RegistrationNumber = "***REMOVED***",
                            Surname = "***REMOVED***"
                        },
                        new
                        {
                            Id = 2147483646,
                            AccountId = 2147483646,
                            AccountState = 0,
                            Email = "tst2@eob.cz",
                            FinanceSupervisorId = 2147483647,
                            Firstname = "Kateřina",
                            Gender = 1,
                            Licence = 2,
                            Nationality = "Česká republika",
                            RegistrationNumber = "***REMOVED***",
                            Surname = "***REMOVED***"
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.UserIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d8ee2e5-907f-46d2-bd4c-82d474454849",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MATEJ",
                            PasswordHash = "AQAAAAEAACcQAAAAEBO4+3GzShbIdI+3r8Bz5cjcpzkP4w1K9NXsutjDC9Ek8a+RyIFSRGPXpkefwdEXcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "matej"
                        },
                        new
                        {
                            Id = 2147483646,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3666b4d9-5ebe-4140-82cb-9a9930402529",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "KATKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEJw3id42PIrEfxfb4b10coGhdWpY9aOpsMWWrMn7fVU6tIU4c2gRTLIitUllU0hLEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "katka"
                        });
                });

            modelBuilder.Entity("EvenEntry_EventStage", b =>
                {
                    b.Property<int>("EventEntryId")
                        .HasColumnType("int");

                    b.Property<int>("EventStageId")
                        .HasColumnType("int");

                    b.HasKey("EventEntryId", "EventStageId");

                    b.HasIndex("EventStageId");

                    b.ToTable("EvenEntry_EventStage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "7403bffa-3b4c-4c41-b86f-62ad3db783f0",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "b4952bac-bbb4-4c52-98a2-89a188ba165b",
                            Name = "entries",
                            NormalizedName = "ENTRIES"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "59a5315c-fc3a-435f-b4fe-638da476f055",
                            Name = "events",
                            NormalizedName = "EVENTS"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "a09efce7-fd85-4324-a3cd-86db849c8c01",
                            Name = "finance",
                            NormalizedName = "FINANCE"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "84fb5025-402b-4bc9-a1a1-be75e11178b4",
                            Name = "news",
                            NormalizedName = "NEWS"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "a778e468-0f01-4a9d-abbb-45fd95c2852c",
                            Name = "users",
                            NormalizedName = "USERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 2147483647,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("User_EntriesSupervisor", b =>
                {
                    b.Property<int>("EntriesSupervisorId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EntriesSupervisorId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("User_EntriesSupervisor");

                    b.HasData(
                        new
                        {
                            EntriesSupervisorId = 2147483646,
                            UserId = 2147483647
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Address", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.User", null)
                        .WithOne("Address")
                        .HasForeignKey("ClubIS.CoreLayer.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventClassOption", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.Event", null)
                        .WithMany("ClassOptions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventDeadline", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.Event", null)
                        .WithMany("Deadlines")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventEntry", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubIS.CoreLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventStage", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.Event", null)
                        .WithMany("EventStages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.News", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Payment", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("ClubIS.CoreLayer.Entities.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("ClubIS.CoreLayer.Entities.FinanceAccount", "RecipientAccount")
                        .WithMany()
                        .HasForeignKey("RecipientAccountId");

                    b.HasOne("ClubIS.CoreLayer.Entities.FinanceAccount", "SourceAccount")
                        .WithMany()
                        .HasForeignKey("SourceAccountId");

                    b.Navigation("Event");

                    b.Navigation("Executor");

                    b.Navigation("RecipientAccount");

                    b.Navigation("SourceAccount");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.SiCard", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.User", "User")
                        .WithMany("SiCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.User", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.FinanceAccount", "Account")
                        .WithOne("Owner")
                        .HasForeignKey("ClubIS.CoreLayer.Entities.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubIS.CoreLayer.Entities.User", "FinanceSupervisor")
                        .WithMany()
                        .HasForeignKey("FinanceSupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClubIS.CoreLayer.Entities.MemberFee", "MemberFee")
                        .WithMany()
                        .HasForeignKey("MemberFeeId");

                    b.Navigation("Account");

                    b.Navigation("FinanceSupervisor");

                    b.Navigation("MemberFee");
                });

            modelBuilder.Entity("EvenEntry_EventStage", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.EventEntry", null)
                        .WithMany()
                        .HasForeignKey("EventEntryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ClubIS.CoreLayer.Entities.EventStage", null)
                        .WithMany()
                        .HasForeignKey("EventStageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubIS.CoreLayer.Entities.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User_EntriesSupervisor", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("EntriesSupervisorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ClubIS.CoreLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Event", b =>
                {
                    b.Navigation("ClassOptions");

                    b.Navigation("Deadlines");

                    b.Navigation("EventStages");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.FinanceAccount", b =>
                {
                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("SiCards");
                });
#pragma warning restore 612, 618
        }
    }
}
