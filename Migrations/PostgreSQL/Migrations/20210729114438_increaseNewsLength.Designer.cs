// <auto-generated />
using System;
using ClubIS.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ClubIS.Migrations.PostgreSQL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210729114438_increaseNewsLength")]
    partial class increaseNewsLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("StreetAndNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Brno",
                            PostalCode = "62800",
                            StreetAndNumber = "Pantoflová 16",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Brno",
                            PostalCode = "61300",
                            StreetAndNumber = "Smrková 4",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccommodationOption")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Entries")
                        .HasColumnType("integer");

                    b.Property<int>("EventProperties")
                        .HasColumnType("integer");

                    b.Property<int>("EventState")
                        .HasColumnType("integer");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<string>("Leader")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Organizer")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Place")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TransportOption")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccommodationOption = 2,
                            EndDate = new DateTime(2021, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Entries = 0,
                            EventProperties = 16,
                            EventState = 0,
                            EventType = 2,
                            Link = "mcr2020.obopava.cz",
                            Name = "Soustředění Vysočina",
                            Organizer = "OB ZAM",
                            Place = "Sklené",
                            StartDate = new DateTime(2021, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransportOption = 1
                        },
                        new
                        {
                            Id = 2,
                            AccommodationOption = 2,
                            EndDate = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Entries = 0,
                            EventProperties = 16,
                            EventState = 0,
                            EventType = 0,
                            Link = "mcr2020.obopava.cz",
                            Name = "9. JML  klasická trať",
                            Organizer = "OB ZAM",
                            Place = "Jilemnice",
                            StartDate = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransportOption = 1
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventClassOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventClassOption");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            Name = "A"
                        },
                        new
                        {
                            Id = 2,
                            EventId = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 3,
                            EventId = 2,
                            Name = "D14"
                        },
                        new
                        {
                            Id = 4,
                            EventId = 2,
                            Name = "D45"
                        },
                        new
                        {
                            Id = 5,
                            EventId = 2,
                            Name = "H20"
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventDeadline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDeadline");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deadline = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1
                        },
                        new
                        {
                            Id = 2,
                            Deadline = new DateTime(2021, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2
                        },
                        new
                        {
                            Id = 3,
                            Deadline = new DateTime(2021, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Class")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("HasClubAccommodation")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasClubTransport")
                        .HasColumnType("boolean");

                    b.Property<string>("NoteForClub")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NoteForOrganisator")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SiCardNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Class = "A",
                            EventId = 1,
                            HasClubAccommodation = true,
                            HasClubTransport = true,
                            SiCardNumber = 464031,
                            Status = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Class = "B",
                            EventId = 1,
                            HasClubAccommodation = true,
                            HasClubTransport = true,
                            SiCardNumber = 8670103,
                            Status = 0,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasMaxLength(50)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventStage");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.FinanceAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreditBalance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FinanceAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreditBalance = -1000
                        },
                        new
                        {
                            Id = 2,
                            CreditBalance = 0
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.MemberFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("MemberFeeType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("MemberFees");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Amount = 0,
                            Description = "Oddílem jsou placeny veškeré závody. Závodník platí pouze storna.",
                            MemberFeeType = 4,
                            Name = "All Inclusive"
                        },
                        new
                        {
                            Id = 1,
                            Amount = 100,
                            Description = "Nikam nejezdím nebo málo  veškeré závody se strhávají z osobního vkladu.",
                            MemberFeeType = 1,
                            Name = "Základ"
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.",
                            Title = "test nadpisu",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreditAmount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PaymentState")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipientAccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("SourceAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("StornoNote")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("RecipientAccountId");

                    b.HasIndex("SourceAccountId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreditAmount = 1000,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            ExecutorId = 1,
                            PaymentState = 0,
                            SourceAccountId = 1
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.SiCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SiCard");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDefault = true,
                            Number = 8670103,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDefault = true,
                            Number = 464031,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("AccountState")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FinanceSupervisorId")
                        .HasColumnType("integer");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("Licence")
                        .HasColumnType("integer");

                    b.Property<int?>("MemberFeeId")
                        .HasColumnType("integer");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("FinanceSupervisorId");

                    b.HasIndex("MemberFeeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            AccountState = 0,
                            Email = "tst2@eof.cz",
                            Firstname = "Matěj",
                            Gender = 0,
                            Licence = 0,
                            Nationality = "Česká republika",
                            RegistrationNumber = "ZBM1108",
                            Surname = "Perník"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            AccountState = 0,
                            Email = "tst2@eob.cz",
                            FinanceSupervisorId = 1,
                            Firstname = "Kateřina",
                            Gender = 1,
                            Licence = 2,
                            Nationality = "Česká republika",
                            RegistrationNumber = "ZMB9751",
                            Surname = "Muflonová"
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.UserIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "051e88ba-d861-4bb5-a61b-070f794f76f8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN123",
                            PasswordHash = "AQAAAAEAACcQAAAAEBOM7dcCifDx4vU4b2tFng75DTxmQqQm8fKbjkhOvsNGP7p+e4zmZX3MaN//EWcyBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin123"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1246bc2b-7aa4-442d-a436-4be686372955",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER123",
                            PasswordHash = "AQAAAAEAACcQAAAAEHlta5hHs7qtjLUOdahtClbt9uB3zxe/Dz70NkaWkC6WmCn3euldE0no1us/sSAnFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user123"
                        });
                });

            modelBuilder.Entity("EvenEntry_EventStage", b =>
                {
                    b.Property<int>("EventEntryId")
                        .HasColumnType("integer");

                    b.Property<int>("EventStageId")
                        .HasColumnType("integer");

                    b.HasKey("EventEntryId", "EventStageId");

                    b.HasIndex("EventStageId");

                    b.ToTable("EvenEntry_EventStage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "189058d7-f064-4707-90a8-5e90672674de",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "009d6684-4f90-4240-926c-022fd4223fd7",
                            Name = "entries",
                            NormalizedName = "ENTRIES"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "bc4a6fe6-8a2f-4ef7-b7a3-9943386b85b6",
                            Name = "events",
                            NormalizedName = "EVENTS"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "e6cc433d-4714-4fea-ba4a-9d38d1a6049e",
                            Name = "finance",
                            NormalizedName = "FINANCE"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "bc17a670-9582-46e5-a2da-2ea285e3177c",
                            Name = "news",
                            NormalizedName = "NEWS"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "b5817ac2-6a4c-4e86-9671-0c1141651da9",
                            Name = "users",
                            NormalizedName = "USERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("User_EntriesSupervisor", b =>
                {
                    b.Property<int>("EntriesSupervisorId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("EntriesSupervisorId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("User_EntriesSupervisor");

                    b.HasData(
                        new
                        {
                            EntriesSupervisorId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Address", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.User", null)
                        .WithOne("Address")
                        .HasForeignKey("ClubIS.CoreLayer.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventClassOption", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.Event", null)
                        .WithMany("ClassOptions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventDeadline", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.Event", null)
                        .WithMany("Deadlines")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventEntry", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubIS.CoreLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.EventStage", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.Event", null)
                        .WithMany("EventStages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.News", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Payment", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("ClubIS.CoreLayer.Entities.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("ClubIS.CoreLayer.Entities.FinanceAccount", "RecipientAccount")
                        .WithMany()
                        .HasForeignKey("RecipientAccountId");

                    b.HasOne("ClubIS.CoreLayer.Entities.FinanceAccount", "SourceAccount")
                        .WithMany()
                        .HasForeignKey("SourceAccountId");

                    b.Navigation("Event");

                    b.Navigation("Executor");

                    b.Navigation("RecipientAccount");

                    b.Navigation("SourceAccount");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.SiCard", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.User", "User")
                        .WithMany("SiCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.User", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.FinanceAccount", "Account")
                        .WithOne("Owner")
                        .HasForeignKey("ClubIS.CoreLayer.Entities.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubIS.CoreLayer.Entities.User", "FinanceSupervisor")
                        .WithMany()
                        .HasForeignKey("FinanceSupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClubIS.CoreLayer.Entities.MemberFee", "MemberFee")
                        .WithMany()
                        .HasForeignKey("MemberFeeId");

                    b.Navigation("Account");

                    b.Navigation("FinanceSupervisor");

                    b.Navigation("MemberFee");
                });

            modelBuilder.Entity("EvenEntry_EventStage", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.EventEntry", null)
                        .WithMany()
                        .HasForeignKey("EventEntryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ClubIS.CoreLayer.Entities.EventStage", null)
                        .WithMany()
                        .HasForeignKey("EventStageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubIS.CoreLayer.Entities.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User_EntriesSupervisor", b =>
                {
                    b.HasOne("ClubIS.CoreLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("EntriesSupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubIS.CoreLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.Event", b =>
                {
                    b.Navigation("ClassOptions");

                    b.Navigation("Deadlines");

                    b.Navigation("EventStages");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.FinanceAccount", b =>
                {
                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ClubIS.CoreLayer.Entities.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("SiCards");
                });
#pragma warning restore 612, 618
        }
    }
}
